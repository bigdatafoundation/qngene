/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.bdgenomics.formats.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class StructuralVariant extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StructuralVariant\",\"namespace\":\"org.bdgenomics.formats.avro\",\"fields\":[{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"StructuralVariantType\",\"doc\":\"Descriptors for the type of a structural variant. The most specific descriptor\\n should be used, if possible. E.g., duplication should be used instead of\\n insertion if the inserted sequence is not novel. Tandem duplication should\\n be used instead of duplication if the duplication is known to follow the\\n duplicated sequence.\",\"symbols\":[\"DELETION\",\"INSERTION\",\"INVERSION\",\"MOBILE_INSERTION\",\"MOBILE_DELETION\",\"DUPLICATION\",\"TANDEM_DUPLICATION\"]}],\"doc\":\"The type of this structural variant.\",\"default\":null},{\"name\":\"assembly\",\"type\":[\"null\",\"string\"],\"doc\":\"The URL of the FASTA/NucleotideContig assembly for this structural variant,\\n   if one is available.\",\"default\":null},{\"name\":\"precise\",\"type\":[\"boolean\",\"null\"],\"doc\":\"Whether this structural variant call has precise breakpoints or not. Default\\n   value is true. If the call is imprecise, confidence intervals should be provided.\",\"default\":true},{\"name\":\"startWindow\",\"type\":[\"null\",\"int\"],\"doc\":\"The size of the confidence window around the start of the structural variant.\",\"default\":null},{\"name\":\"endWindow\",\"type\":[\"null\",\"int\"],\"doc\":\"The size of the confidence window around the end of the structural variant.\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The type of this structural variant. */
  @Deprecated public org.bdgenomics.formats.avro.StructuralVariantType type;
  /** The URL of the FASTA/NucleotideContig assembly for this structural variant,
   if one is available. */
  @Deprecated public java.lang.CharSequence assembly;
  /** Whether this structural variant call has precise breakpoints or not. Default
   value is true. If the call is imprecise, confidence intervals should be provided. */
  @Deprecated public java.lang.Boolean precise;
  /** The size of the confidence window around the start of the structural variant. */
  @Deprecated public java.lang.Integer startWindow;
  /** The size of the confidence window around the end of the structural variant. */
  @Deprecated public java.lang.Integer endWindow;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public StructuralVariant() {}

  /**
   * All-args constructor.
   */
  public StructuralVariant(org.bdgenomics.formats.avro.StructuralVariantType type, java.lang.CharSequence assembly, java.lang.Boolean precise, java.lang.Integer startWindow, java.lang.Integer endWindow) {
    this.type = type;
    this.assembly = assembly;
    this.precise = precise;
    this.startWindow = startWindow;
    this.endWindow = endWindow;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return assembly;
    case 2: return precise;
    case 3: return startWindow;
    case 4: return endWindow;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type = (org.bdgenomics.formats.avro.StructuralVariantType)value$; break;
    case 1: assembly = (java.lang.CharSequence)value$; break;
    case 2: precise = (java.lang.Boolean)value$; break;
    case 3: startWindow = (java.lang.Integer)value$; break;
    case 4: endWindow = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type' field.
   * The type of this structural variant.   */
  public org.bdgenomics.formats.avro.StructuralVariantType getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * The type of this structural variant.   * @param value the value to set.
   */
  public void setType(org.bdgenomics.formats.avro.StructuralVariantType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'assembly' field.
   * The URL of the FASTA/NucleotideContig assembly for this structural variant,
   if one is available.   */
  public java.lang.CharSequence getAssembly() {
    return assembly;
  }

  /**
   * Sets the value of the 'assembly' field.
   * The URL of the FASTA/NucleotideContig assembly for this structural variant,
   if one is available.   * @param value the value to set.
   */
  public void setAssembly(java.lang.CharSequence value) {
    this.assembly = value;
  }

  /**
   * Gets the value of the 'precise' field.
   * Whether this structural variant call has precise breakpoints or not. Default
   value is true. If the call is imprecise, confidence intervals should be provided.   */
  public java.lang.Boolean getPrecise() {
    return precise;
  }

  /**
   * Sets the value of the 'precise' field.
   * Whether this structural variant call has precise breakpoints or not. Default
   value is true. If the call is imprecise, confidence intervals should be provided.   * @param value the value to set.
   */
  public void setPrecise(java.lang.Boolean value) {
    this.precise = value;
  }

  /**
   * Gets the value of the 'startWindow' field.
   * The size of the confidence window around the start of the structural variant.   */
  public java.lang.Integer getStartWindow() {
    return startWindow;
  }

  /**
   * Sets the value of the 'startWindow' field.
   * The size of the confidence window around the start of the structural variant.   * @param value the value to set.
   */
  public void setStartWindow(java.lang.Integer value) {
    this.startWindow = value;
  }

  /**
   * Gets the value of the 'endWindow' field.
   * The size of the confidence window around the end of the structural variant.   */
  public java.lang.Integer getEndWindow() {
    return endWindow;
  }

  /**
   * Sets the value of the 'endWindow' field.
   * The size of the confidence window around the end of the structural variant.   * @param value the value to set.
   */
  public void setEndWindow(java.lang.Integer value) {
    this.endWindow = value;
  }

  /** Creates a new StructuralVariant RecordBuilder */
  public static org.bdgenomics.formats.avro.StructuralVariant.Builder newBuilder() {
    return new org.bdgenomics.formats.avro.StructuralVariant.Builder();
  }
  
  /** Creates a new StructuralVariant RecordBuilder by copying an existing Builder */
  public static org.bdgenomics.formats.avro.StructuralVariant.Builder newBuilder(org.bdgenomics.formats.avro.StructuralVariant.Builder other) {
    return new org.bdgenomics.formats.avro.StructuralVariant.Builder(other);
  }
  
  /** Creates a new StructuralVariant RecordBuilder by copying an existing StructuralVariant instance */
  public static org.bdgenomics.formats.avro.StructuralVariant.Builder newBuilder(org.bdgenomics.formats.avro.StructuralVariant other) {
    return new org.bdgenomics.formats.avro.StructuralVariant.Builder(other);
  }
  
  /**
   * RecordBuilder for StructuralVariant instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StructuralVariant>
    implements org.apache.avro.data.RecordBuilder<StructuralVariant> {

    private org.bdgenomics.formats.avro.StructuralVariantType type;
    private java.lang.CharSequence assembly;
    private java.lang.Boolean precise;
    private java.lang.Integer startWindow;
    private java.lang.Integer endWindow;

    /** Creates a new Builder */
    private Builder() {
      super(org.bdgenomics.formats.avro.StructuralVariant.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.bdgenomics.formats.avro.StructuralVariant.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.assembly)) {
        this.assembly = data().deepCopy(fields()[1].schema(), other.assembly);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.precise)) {
        this.precise = data().deepCopy(fields()[2].schema(), other.precise);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.startWindow)) {
        this.startWindow = data().deepCopy(fields()[3].schema(), other.startWindow);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.endWindow)) {
        this.endWindow = data().deepCopy(fields()[4].schema(), other.endWindow);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing StructuralVariant instance */
    private Builder(org.bdgenomics.formats.avro.StructuralVariant other) {
            super(org.bdgenomics.formats.avro.StructuralVariant.SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.assembly)) {
        this.assembly = data().deepCopy(fields()[1].schema(), other.assembly);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.precise)) {
        this.precise = data().deepCopy(fields()[2].schema(), other.precise);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.startWindow)) {
        this.startWindow = data().deepCopy(fields()[3].schema(), other.startWindow);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.endWindow)) {
        this.endWindow = data().deepCopy(fields()[4].schema(), other.endWindow);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'type' field */
    public org.bdgenomics.formats.avro.StructuralVariantType getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public org.bdgenomics.formats.avro.StructuralVariant.Builder setType(org.bdgenomics.formats.avro.StructuralVariantType value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'type' field */
    public org.bdgenomics.formats.avro.StructuralVariant.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'assembly' field */
    public java.lang.CharSequence getAssembly() {
      return assembly;
    }
    
    /** Sets the value of the 'assembly' field */
    public org.bdgenomics.formats.avro.StructuralVariant.Builder setAssembly(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.assembly = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'assembly' field has been set */
    public boolean hasAssembly() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'assembly' field */
    public org.bdgenomics.formats.avro.StructuralVariant.Builder clearAssembly() {
      assembly = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'precise' field */
    public java.lang.Boolean getPrecise() {
      return precise;
    }
    
    /** Sets the value of the 'precise' field */
    public org.bdgenomics.formats.avro.StructuralVariant.Builder setPrecise(java.lang.Boolean value) {
      validate(fields()[2], value);
      this.precise = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'precise' field has been set */
    public boolean hasPrecise() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'precise' field */
    public org.bdgenomics.formats.avro.StructuralVariant.Builder clearPrecise() {
      precise = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'startWindow' field */
    public java.lang.Integer getStartWindow() {
      return startWindow;
    }
    
    /** Sets the value of the 'startWindow' field */
    public org.bdgenomics.formats.avro.StructuralVariant.Builder setStartWindow(java.lang.Integer value) {
      validate(fields()[3], value);
      this.startWindow = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'startWindow' field has been set */
    public boolean hasStartWindow() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'startWindow' field */
    public org.bdgenomics.formats.avro.StructuralVariant.Builder clearStartWindow() {
      startWindow = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'endWindow' field */
    public java.lang.Integer getEndWindow() {
      return endWindow;
    }
    
    /** Sets the value of the 'endWindow' field */
    public org.bdgenomics.formats.avro.StructuralVariant.Builder setEndWindow(java.lang.Integer value) {
      validate(fields()[4], value);
      this.endWindow = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'endWindow' field has been set */
    public boolean hasEndWindow() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'endWindow' field */
    public org.bdgenomics.formats.avro.StructuralVariant.Builder clearEndWindow() {
      endWindow = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public StructuralVariant build() {
      try {
        StructuralVariant record = new StructuralVariant();
        record.type = fieldSetFlags()[0] ? this.type : (org.bdgenomics.formats.avro.StructuralVariantType) defaultValue(fields()[0]);
        record.assembly = fieldSetFlags()[1] ? this.assembly : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.precise = fieldSetFlags()[2] ? this.precise : (java.lang.Boolean) defaultValue(fields()[2]);
        record.startWindow = fieldSetFlags()[3] ? this.startWindow : (java.lang.Integer) defaultValue(fields()[3]);
        record.endWindow = fieldSetFlags()[4] ? this.endWindow : (java.lang.Integer) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
