/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.bdgenomics.formats.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class VariantCallingAnnotations extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"VariantCallingAnnotations\",\"namespace\":\"org.bdgenomics.formats.avro\",\"fields\":[{\"name\":\"variantIsPassing\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"variantFilters\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"default\":[]},{\"name\":\"downsampled\",\"type\":[\"null\",\"boolean\"],\"doc\":\"True if the reads covering this site were randomly downsampled to reduce coverage.\",\"default\":null},{\"name\":\"baseQRankSum\",\"type\":[\"null\",\"float\"],\"doc\":\"The Wilcoxon rank-sum test statistic of the base quality scores. The base quality\\n   scores are separated by whether or not the base supports the reference or the\\n   alternate allele.\",\"default\":null},{\"name\":\"fisherStrandBiasPValue\",\"type\":[\"null\",\"float\"],\"doc\":\"The Fisher's exact test score for the strand bias of the reference and alternate\\n   alleles. Stored as a phred scaled probability. Thus, if:\\n\\n   * a = The number of positive strand reads covering the reference allele\\n   * b = The number of positive strand reads covering the alternate allele\\n   * c = The number of negative strand reads covering the reference allele\\n   * d = The number of negative strand reads covering the alternate allele\\n\\n   This value takes the score:\\n   \\n   -10 log((a + b)! * (c + d)! * (a + c)! * (b + d)! / (a! b! c! d! n!)\\n\\n   Where n = a + b + c + d.\",\"default\":null},{\"name\":\"rmsMapQ\",\"type\":[\"null\",\"float\"],\"doc\":\"The root mean square of the mapping qualities of reads covering this site.\",\"default\":null},{\"name\":\"mapq0Reads\",\"type\":[\"null\",\"int\"],\"doc\":\"The number of reads at this site with mapping quality equal to 0.\",\"default\":null},{\"name\":\"mqRankSum\",\"type\":[\"null\",\"float\"],\"doc\":\"The Wilcoxon rank-sum test statistic of the mapping quality scores. The mapping\\n   quality scores are separated by whether or not the read supported the reference or the\\n   alternate allele.\",\"default\":null},{\"name\":\"readPositionRankSum\",\"type\":[\"null\",\"float\"],\"doc\":\"The Wilcoxon rank-sum test statistic of the position of the base in the read at this site.\\n   The positions are separated by whether or not the base supports the reference or the\\n   alternate allele.\",\"default\":null},{\"name\":\"genotypePriors\",\"type\":{\"type\":\"array\",\"items\":\"float\"},\"doc\":\"The log scale prior probabilities of the various genotype states at this site.\\n   The number of elements in this array should be equal to the ploidy at this\\n   site, plus 1.\",\"default\":[]},{\"name\":\"genotypePosteriors\",\"type\":{\"type\":\"array\",\"items\":\"float\"},\"doc\":\"The log scaled posterior probabilities of the various genotype states at this site,\\n   in this sample. The number of elements in this array should be equal to the ploidy at\\n   this site, plus 1.\",\"default\":[]},{\"name\":\"vqslod\",\"type\":[\"null\",\"float\"],\"doc\":\"The log-odds ratio of being a true vs. false variant under a trained statistical model.\\n    This model can be a multivariate Gaussian mixture, support vector machine, etc.\",\"default\":null},{\"name\":\"culprit\",\"type\":[\"null\",\"string\"],\"doc\":\"If known, the feature that contributed the most to this variant being classified as\\n   a false variant.\",\"default\":null},{\"name\":\"attributes\",\"type\":{\"type\":\"map\",\"values\":\"string\"},\"doc\":\"Additional feature info that doesn't fit into the standard fields above.\\n\\n   They are all encoded as (string, string) key-value pairs.\",\"default\":{}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.Boolean variantIsPassing;
  @Deprecated public java.util.List<java.lang.CharSequence> variantFilters;
  /** True if the reads covering this site were randomly downsampled to reduce coverage. */
  @Deprecated public java.lang.Boolean downsampled;
  /** The Wilcoxon rank-sum test statistic of the base quality scores. The base quality
   scores are separated by whether or not the base supports the reference or the
   alternate allele. */
  @Deprecated public java.lang.Float baseQRankSum;
  /** The Fisher's exact test score for the strand bias of the reference and alternate
   alleles. Stored as a phred scaled probability. Thus, if:

   * a = The number of positive strand reads covering the reference allele
   * b = The number of positive strand reads covering the alternate allele
   * c = The number of negative strand reads covering the reference allele
   * d = The number of negative strand reads covering the alternate allele

   This value takes the score:
   
   -10 log((a + b)! * (c + d)! * (a + c)! * (b + d)! / (a! b! c! d! n!)

   Where n = a + b + c + d. */
  @Deprecated public java.lang.Float fisherStrandBiasPValue;
  /** The root mean square of the mapping qualities of reads covering this site. */
  @Deprecated public java.lang.Float rmsMapQ;
  /** The number of reads at this site with mapping quality equal to 0. */
  @Deprecated public java.lang.Integer mapq0Reads;
  /** The Wilcoxon rank-sum test statistic of the mapping quality scores. The mapping
   quality scores are separated by whether or not the read supported the reference or the
   alternate allele. */
  @Deprecated public java.lang.Float mqRankSum;
  /** The Wilcoxon rank-sum test statistic of the position of the base in the read at this site.
   The positions are separated by whether or not the base supports the reference or the
   alternate allele. */
  @Deprecated public java.lang.Float readPositionRankSum;
  /** The log scale prior probabilities of the various genotype states at this site.
   The number of elements in this array should be equal to the ploidy at this
   site, plus 1. */
  @Deprecated public java.util.List<java.lang.Float> genotypePriors;
  /** The log scaled posterior probabilities of the various genotype states at this site,
   in this sample. The number of elements in this array should be equal to the ploidy at
   this site, plus 1. */
  @Deprecated public java.util.List<java.lang.Float> genotypePosteriors;
  /** The log-odds ratio of being a true vs. false variant under a trained statistical model.
    This model can be a multivariate Gaussian mixture, support vector machine, etc. */
  @Deprecated public java.lang.Float vqslod;
  /** If known, the feature that contributed the most to this variant being classified as
   a false variant. */
  @Deprecated public java.lang.CharSequence culprit;
  /** Additional feature info that doesn't fit into the standard fields above.

   They are all encoded as (string, string) key-value pairs. */
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> attributes;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public VariantCallingAnnotations() {}

  /**
   * All-args constructor.
   */
  public VariantCallingAnnotations(java.lang.Boolean variantIsPassing, java.util.List<java.lang.CharSequence> variantFilters, java.lang.Boolean downsampled, java.lang.Float baseQRankSum, java.lang.Float fisherStrandBiasPValue, java.lang.Float rmsMapQ, java.lang.Integer mapq0Reads, java.lang.Float mqRankSum, java.lang.Float readPositionRankSum, java.util.List<java.lang.Float> genotypePriors, java.util.List<java.lang.Float> genotypePosteriors, java.lang.Float vqslod, java.lang.CharSequence culprit, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> attributes) {
    this.variantIsPassing = variantIsPassing;
    this.variantFilters = variantFilters;
    this.downsampled = downsampled;
    this.baseQRankSum = baseQRankSum;
    this.fisherStrandBiasPValue = fisherStrandBiasPValue;
    this.rmsMapQ = rmsMapQ;
    this.mapq0Reads = mapq0Reads;
    this.mqRankSum = mqRankSum;
    this.readPositionRankSum = readPositionRankSum;
    this.genotypePriors = genotypePriors;
    this.genotypePosteriors = genotypePosteriors;
    this.vqslod = vqslod;
    this.culprit = culprit;
    this.attributes = attributes;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return variantIsPassing;
    case 1: return variantFilters;
    case 2: return downsampled;
    case 3: return baseQRankSum;
    case 4: return fisherStrandBiasPValue;
    case 5: return rmsMapQ;
    case 6: return mapq0Reads;
    case 7: return mqRankSum;
    case 8: return readPositionRankSum;
    case 9: return genotypePriors;
    case 10: return genotypePosteriors;
    case 11: return vqslod;
    case 12: return culprit;
    case 13: return attributes;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: variantIsPassing = (java.lang.Boolean)value$; break;
    case 1: variantFilters = (java.util.List<java.lang.CharSequence>)value$; break;
    case 2: downsampled = (java.lang.Boolean)value$; break;
    case 3: baseQRankSum = (java.lang.Float)value$; break;
    case 4: fisherStrandBiasPValue = (java.lang.Float)value$; break;
    case 5: rmsMapQ = (java.lang.Float)value$; break;
    case 6: mapq0Reads = (java.lang.Integer)value$; break;
    case 7: mqRankSum = (java.lang.Float)value$; break;
    case 8: readPositionRankSum = (java.lang.Float)value$; break;
    case 9: genotypePriors = (java.util.List<java.lang.Float>)value$; break;
    case 10: genotypePosteriors = (java.util.List<java.lang.Float>)value$; break;
    case 11: vqslod = (java.lang.Float)value$; break;
    case 12: culprit = (java.lang.CharSequence)value$; break;
    case 13: attributes = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'variantIsPassing' field.
   */
  public java.lang.Boolean getVariantIsPassing() {
    return variantIsPassing;
  }

  /**
   * Sets the value of the 'variantIsPassing' field.
   * @param value the value to set.
   */
  public void setVariantIsPassing(java.lang.Boolean value) {
    this.variantIsPassing = value;
  }

  /**
   * Gets the value of the 'variantFilters' field.
   */
  public java.util.List<java.lang.CharSequence> getVariantFilters() {
    return variantFilters;
  }

  /**
   * Sets the value of the 'variantFilters' field.
   * @param value the value to set.
   */
  public void setVariantFilters(java.util.List<java.lang.CharSequence> value) {
    this.variantFilters = value;
  }

  /**
   * Gets the value of the 'downsampled' field.
   * True if the reads covering this site were randomly downsampled to reduce coverage.   */
  public java.lang.Boolean getDownsampled() {
    return downsampled;
  }

  /**
   * Sets the value of the 'downsampled' field.
   * True if the reads covering this site were randomly downsampled to reduce coverage.   * @param value the value to set.
   */
  public void setDownsampled(java.lang.Boolean value) {
    this.downsampled = value;
  }

  /**
   * Gets the value of the 'baseQRankSum' field.
   * The Wilcoxon rank-sum test statistic of the base quality scores. The base quality
   scores are separated by whether or not the base supports the reference or the
   alternate allele.   */
  public java.lang.Float getBaseQRankSum() {
    return baseQRankSum;
  }

  /**
   * Sets the value of the 'baseQRankSum' field.
   * The Wilcoxon rank-sum test statistic of the base quality scores. The base quality
   scores are separated by whether or not the base supports the reference or the
   alternate allele.   * @param value the value to set.
   */
  public void setBaseQRankSum(java.lang.Float value) {
    this.baseQRankSum = value;
  }

  /**
   * Gets the value of the 'fisherStrandBiasPValue' field.
   * The Fisher's exact test score for the strand bias of the reference and alternate
   alleles. Stored as a phred scaled probability. Thus, if:

   * a = The number of positive strand reads covering the reference allele
   * b = The number of positive strand reads covering the alternate allele
   * c = The number of negative strand reads covering the reference allele
   * d = The number of negative strand reads covering the alternate allele

   This value takes the score:
   
   -10 log((a + b)! * (c + d)! * (a + c)! * (b + d)! / (a! b! c! d! n!)

   Where n = a + b + c + d.   */
  public java.lang.Float getFisherStrandBiasPValue() {
    return fisherStrandBiasPValue;
  }

  /**
   * Sets the value of the 'fisherStrandBiasPValue' field.
   * The Fisher's exact test score for the strand bias of the reference and alternate
   alleles. Stored as a phred scaled probability. Thus, if:

   * a = The number of positive strand reads covering the reference allele
   * b = The number of positive strand reads covering the alternate allele
   * c = The number of negative strand reads covering the reference allele
   * d = The number of negative strand reads covering the alternate allele

   This value takes the score:
   
   -10 log((a + b)! * (c + d)! * (a + c)! * (b + d)! / (a! b! c! d! n!)

   Where n = a + b + c + d.   * @param value the value to set.
   */
  public void setFisherStrandBiasPValue(java.lang.Float value) {
    this.fisherStrandBiasPValue = value;
  }

  /**
   * Gets the value of the 'rmsMapQ' field.
   * The root mean square of the mapping qualities of reads covering this site.   */
  public java.lang.Float getRmsMapQ() {
    return rmsMapQ;
  }

  /**
   * Sets the value of the 'rmsMapQ' field.
   * The root mean square of the mapping qualities of reads covering this site.   * @param value the value to set.
   */
  public void setRmsMapQ(java.lang.Float value) {
    this.rmsMapQ = value;
  }

  /**
   * Gets the value of the 'mapq0Reads' field.
   * The number of reads at this site with mapping quality equal to 0.   */
  public java.lang.Integer getMapq0Reads() {
    return mapq0Reads;
  }

  /**
   * Sets the value of the 'mapq0Reads' field.
   * The number of reads at this site with mapping quality equal to 0.   * @param value the value to set.
   */
  public void setMapq0Reads(java.lang.Integer value) {
    this.mapq0Reads = value;
  }

  /**
   * Gets the value of the 'mqRankSum' field.
   * The Wilcoxon rank-sum test statistic of the mapping quality scores. The mapping
   quality scores are separated by whether or not the read supported the reference or the
   alternate allele.   */
  public java.lang.Float getMqRankSum() {
    return mqRankSum;
  }

  /**
   * Sets the value of the 'mqRankSum' field.
   * The Wilcoxon rank-sum test statistic of the mapping quality scores. The mapping
   quality scores are separated by whether or not the read supported the reference or the
   alternate allele.   * @param value the value to set.
   */
  public void setMqRankSum(java.lang.Float value) {
    this.mqRankSum = value;
  }

  /**
   * Gets the value of the 'readPositionRankSum' field.
   * The Wilcoxon rank-sum test statistic of the position of the base in the read at this site.
   The positions are separated by whether or not the base supports the reference or the
   alternate allele.   */
  public java.lang.Float getReadPositionRankSum() {
    return readPositionRankSum;
  }

  /**
   * Sets the value of the 'readPositionRankSum' field.
   * The Wilcoxon rank-sum test statistic of the position of the base in the read at this site.
   The positions are separated by whether or not the base supports the reference or the
   alternate allele.   * @param value the value to set.
   */
  public void setReadPositionRankSum(java.lang.Float value) {
    this.readPositionRankSum = value;
  }

  /**
   * Gets the value of the 'genotypePriors' field.
   * The log scale prior probabilities of the various genotype states at this site.
   The number of elements in this array should be equal to the ploidy at this
   site, plus 1.   */
  public java.util.List<java.lang.Float> getGenotypePriors() {
    return genotypePriors;
  }

  /**
   * Sets the value of the 'genotypePriors' field.
   * The log scale prior probabilities of the various genotype states at this site.
   The number of elements in this array should be equal to the ploidy at this
   site, plus 1.   * @param value the value to set.
   */
  public void setGenotypePriors(java.util.List<java.lang.Float> value) {
    this.genotypePriors = value;
  }

  /**
   * Gets the value of the 'genotypePosteriors' field.
   * The log scaled posterior probabilities of the various genotype states at this site,
   in this sample. The number of elements in this array should be equal to the ploidy at
   this site, plus 1.   */
  public java.util.List<java.lang.Float> getGenotypePosteriors() {
    return genotypePosteriors;
  }

  /**
   * Sets the value of the 'genotypePosteriors' field.
   * The log scaled posterior probabilities of the various genotype states at this site,
   in this sample. The number of elements in this array should be equal to the ploidy at
   this site, plus 1.   * @param value the value to set.
   */
  public void setGenotypePosteriors(java.util.List<java.lang.Float> value) {
    this.genotypePosteriors = value;
  }

  /**
   * Gets the value of the 'vqslod' field.
   * The log-odds ratio of being a true vs. false variant under a trained statistical model.
    This model can be a multivariate Gaussian mixture, support vector machine, etc.   */
  public java.lang.Float getVqslod() {
    return vqslod;
  }

  /**
   * Sets the value of the 'vqslod' field.
   * The log-odds ratio of being a true vs. false variant under a trained statistical model.
    This model can be a multivariate Gaussian mixture, support vector machine, etc.   * @param value the value to set.
   */
  public void setVqslod(java.lang.Float value) {
    this.vqslod = value;
  }

  /**
   * Gets the value of the 'culprit' field.
   * If known, the feature that contributed the most to this variant being classified as
   a false variant.   */
  public java.lang.CharSequence getCulprit() {
    return culprit;
  }

  /**
   * Sets the value of the 'culprit' field.
   * If known, the feature that contributed the most to this variant being classified as
   a false variant.   * @param value the value to set.
   */
  public void setCulprit(java.lang.CharSequence value) {
    this.culprit = value;
  }

  /**
   * Gets the value of the 'attributes' field.
   * Additional feature info that doesn't fit into the standard fields above.

   They are all encoded as (string, string) key-value pairs.   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getAttributes() {
    return attributes;
  }

  /**
   * Sets the value of the 'attributes' field.
   * Additional feature info that doesn't fit into the standard fields above.

   They are all encoded as (string, string) key-value pairs.   * @param value the value to set.
   */
  public void setAttributes(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.attributes = value;
  }

  /** Creates a new VariantCallingAnnotations RecordBuilder */
  public static org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder newBuilder() {
    return new org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder();
  }
  
  /** Creates a new VariantCallingAnnotations RecordBuilder by copying an existing Builder */
  public static org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder newBuilder(org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder other) {
    return new org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder(other);
  }
  
  /** Creates a new VariantCallingAnnotations RecordBuilder by copying an existing VariantCallingAnnotations instance */
  public static org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder newBuilder(org.bdgenomics.formats.avro.VariantCallingAnnotations other) {
    return new org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder(other);
  }
  
  /**
   * RecordBuilder for VariantCallingAnnotations instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<VariantCallingAnnotations>
    implements org.apache.avro.data.RecordBuilder<VariantCallingAnnotations> {

    private java.lang.Boolean variantIsPassing;
    private java.util.List<java.lang.CharSequence> variantFilters;
    private java.lang.Boolean downsampled;
    private java.lang.Float baseQRankSum;
    private java.lang.Float fisherStrandBiasPValue;
    private java.lang.Float rmsMapQ;
    private java.lang.Integer mapq0Reads;
    private java.lang.Float mqRankSum;
    private java.lang.Float readPositionRankSum;
    private java.util.List<java.lang.Float> genotypePriors;
    private java.util.List<java.lang.Float> genotypePosteriors;
    private java.lang.Float vqslod;
    private java.lang.CharSequence culprit;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> attributes;

    /** Creates a new Builder */
    private Builder() {
      super(org.bdgenomics.formats.avro.VariantCallingAnnotations.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.variantIsPassing)) {
        this.variantIsPassing = data().deepCopy(fields()[0].schema(), other.variantIsPassing);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.variantFilters)) {
        this.variantFilters = data().deepCopy(fields()[1].schema(), other.variantFilters);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.downsampled)) {
        this.downsampled = data().deepCopy(fields()[2].schema(), other.downsampled);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.baseQRankSum)) {
        this.baseQRankSum = data().deepCopy(fields()[3].schema(), other.baseQRankSum);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.fisherStrandBiasPValue)) {
        this.fisherStrandBiasPValue = data().deepCopy(fields()[4].schema(), other.fisherStrandBiasPValue);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.rmsMapQ)) {
        this.rmsMapQ = data().deepCopy(fields()[5].schema(), other.rmsMapQ);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.mapq0Reads)) {
        this.mapq0Reads = data().deepCopy(fields()[6].schema(), other.mapq0Reads);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.mqRankSum)) {
        this.mqRankSum = data().deepCopy(fields()[7].schema(), other.mqRankSum);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.readPositionRankSum)) {
        this.readPositionRankSum = data().deepCopy(fields()[8].schema(), other.readPositionRankSum);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.genotypePriors)) {
        this.genotypePriors = data().deepCopy(fields()[9].schema(), other.genotypePriors);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.genotypePosteriors)) {
        this.genotypePosteriors = data().deepCopy(fields()[10].schema(), other.genotypePosteriors);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.vqslod)) {
        this.vqslod = data().deepCopy(fields()[11].schema(), other.vqslod);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.culprit)) {
        this.culprit = data().deepCopy(fields()[12].schema(), other.culprit);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.attributes)) {
        this.attributes = data().deepCopy(fields()[13].schema(), other.attributes);
        fieldSetFlags()[13] = true;
      }
    }
    
    /** Creates a Builder by copying an existing VariantCallingAnnotations instance */
    private Builder(org.bdgenomics.formats.avro.VariantCallingAnnotations other) {
            super(org.bdgenomics.formats.avro.VariantCallingAnnotations.SCHEMA$);
      if (isValidValue(fields()[0], other.variantIsPassing)) {
        this.variantIsPassing = data().deepCopy(fields()[0].schema(), other.variantIsPassing);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.variantFilters)) {
        this.variantFilters = data().deepCopy(fields()[1].schema(), other.variantFilters);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.downsampled)) {
        this.downsampled = data().deepCopy(fields()[2].schema(), other.downsampled);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.baseQRankSum)) {
        this.baseQRankSum = data().deepCopy(fields()[3].schema(), other.baseQRankSum);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.fisherStrandBiasPValue)) {
        this.fisherStrandBiasPValue = data().deepCopy(fields()[4].schema(), other.fisherStrandBiasPValue);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.rmsMapQ)) {
        this.rmsMapQ = data().deepCopy(fields()[5].schema(), other.rmsMapQ);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.mapq0Reads)) {
        this.mapq0Reads = data().deepCopy(fields()[6].schema(), other.mapq0Reads);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.mqRankSum)) {
        this.mqRankSum = data().deepCopy(fields()[7].schema(), other.mqRankSum);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.readPositionRankSum)) {
        this.readPositionRankSum = data().deepCopy(fields()[8].schema(), other.readPositionRankSum);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.genotypePriors)) {
        this.genotypePriors = data().deepCopy(fields()[9].schema(), other.genotypePriors);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.genotypePosteriors)) {
        this.genotypePosteriors = data().deepCopy(fields()[10].schema(), other.genotypePosteriors);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.vqslod)) {
        this.vqslod = data().deepCopy(fields()[11].schema(), other.vqslod);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.culprit)) {
        this.culprit = data().deepCopy(fields()[12].schema(), other.culprit);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.attributes)) {
        this.attributes = data().deepCopy(fields()[13].schema(), other.attributes);
        fieldSetFlags()[13] = true;
      }
    }

    /** Gets the value of the 'variantIsPassing' field */
    public java.lang.Boolean getVariantIsPassing() {
      return variantIsPassing;
    }
    
    /** Sets the value of the 'variantIsPassing' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder setVariantIsPassing(java.lang.Boolean value) {
      validate(fields()[0], value);
      this.variantIsPassing = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'variantIsPassing' field has been set */
    public boolean hasVariantIsPassing() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'variantIsPassing' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder clearVariantIsPassing() {
      variantIsPassing = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'variantFilters' field */
    public java.util.List<java.lang.CharSequence> getVariantFilters() {
      return variantFilters;
    }
    
    /** Sets the value of the 'variantFilters' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder setVariantFilters(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[1], value);
      this.variantFilters = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'variantFilters' field has been set */
    public boolean hasVariantFilters() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'variantFilters' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder clearVariantFilters() {
      variantFilters = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'downsampled' field */
    public java.lang.Boolean getDownsampled() {
      return downsampled;
    }
    
    /** Sets the value of the 'downsampled' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder setDownsampled(java.lang.Boolean value) {
      validate(fields()[2], value);
      this.downsampled = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'downsampled' field has been set */
    public boolean hasDownsampled() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'downsampled' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder clearDownsampled() {
      downsampled = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'baseQRankSum' field */
    public java.lang.Float getBaseQRankSum() {
      return baseQRankSum;
    }
    
    /** Sets the value of the 'baseQRankSum' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder setBaseQRankSum(java.lang.Float value) {
      validate(fields()[3], value);
      this.baseQRankSum = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'baseQRankSum' field has been set */
    public boolean hasBaseQRankSum() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'baseQRankSum' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder clearBaseQRankSum() {
      baseQRankSum = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'fisherStrandBiasPValue' field */
    public java.lang.Float getFisherStrandBiasPValue() {
      return fisherStrandBiasPValue;
    }
    
    /** Sets the value of the 'fisherStrandBiasPValue' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder setFisherStrandBiasPValue(java.lang.Float value) {
      validate(fields()[4], value);
      this.fisherStrandBiasPValue = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'fisherStrandBiasPValue' field has been set */
    public boolean hasFisherStrandBiasPValue() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'fisherStrandBiasPValue' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder clearFisherStrandBiasPValue() {
      fisherStrandBiasPValue = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'rmsMapQ' field */
    public java.lang.Float getRmsMapQ() {
      return rmsMapQ;
    }
    
    /** Sets the value of the 'rmsMapQ' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder setRmsMapQ(java.lang.Float value) {
      validate(fields()[5], value);
      this.rmsMapQ = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'rmsMapQ' field has been set */
    public boolean hasRmsMapQ() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'rmsMapQ' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder clearRmsMapQ() {
      rmsMapQ = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'mapq0Reads' field */
    public java.lang.Integer getMapq0Reads() {
      return mapq0Reads;
    }
    
    /** Sets the value of the 'mapq0Reads' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder setMapq0Reads(java.lang.Integer value) {
      validate(fields()[6], value);
      this.mapq0Reads = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'mapq0Reads' field has been set */
    public boolean hasMapq0Reads() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'mapq0Reads' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder clearMapq0Reads() {
      mapq0Reads = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'mqRankSum' field */
    public java.lang.Float getMqRankSum() {
      return mqRankSum;
    }
    
    /** Sets the value of the 'mqRankSum' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder setMqRankSum(java.lang.Float value) {
      validate(fields()[7], value);
      this.mqRankSum = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'mqRankSum' field has been set */
    public boolean hasMqRankSum() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'mqRankSum' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder clearMqRankSum() {
      mqRankSum = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'readPositionRankSum' field */
    public java.lang.Float getReadPositionRankSum() {
      return readPositionRankSum;
    }
    
    /** Sets the value of the 'readPositionRankSum' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder setReadPositionRankSum(java.lang.Float value) {
      validate(fields()[8], value);
      this.readPositionRankSum = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'readPositionRankSum' field has been set */
    public boolean hasReadPositionRankSum() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'readPositionRankSum' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder clearReadPositionRankSum() {
      readPositionRankSum = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'genotypePriors' field */
    public java.util.List<java.lang.Float> getGenotypePriors() {
      return genotypePriors;
    }
    
    /** Sets the value of the 'genotypePriors' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder setGenotypePriors(java.util.List<java.lang.Float> value) {
      validate(fields()[9], value);
      this.genotypePriors = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'genotypePriors' field has been set */
    public boolean hasGenotypePriors() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'genotypePriors' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder clearGenotypePriors() {
      genotypePriors = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'genotypePosteriors' field */
    public java.util.List<java.lang.Float> getGenotypePosteriors() {
      return genotypePosteriors;
    }
    
    /** Sets the value of the 'genotypePosteriors' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder setGenotypePosteriors(java.util.List<java.lang.Float> value) {
      validate(fields()[10], value);
      this.genotypePosteriors = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'genotypePosteriors' field has been set */
    public boolean hasGenotypePosteriors() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'genotypePosteriors' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder clearGenotypePosteriors() {
      genotypePosteriors = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'vqslod' field */
    public java.lang.Float getVqslod() {
      return vqslod;
    }
    
    /** Sets the value of the 'vqslod' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder setVqslod(java.lang.Float value) {
      validate(fields()[11], value);
      this.vqslod = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'vqslod' field has been set */
    public boolean hasVqslod() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'vqslod' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder clearVqslod() {
      vqslod = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /** Gets the value of the 'culprit' field */
    public java.lang.CharSequence getCulprit() {
      return culprit;
    }
    
    /** Sets the value of the 'culprit' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder setCulprit(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.culprit = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'culprit' field has been set */
    public boolean hasCulprit() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'culprit' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder clearCulprit() {
      culprit = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /** Gets the value of the 'attributes' field */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getAttributes() {
      return attributes;
    }
    
    /** Sets the value of the 'attributes' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder setAttributes(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[13], value);
      this.attributes = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'attributes' field has been set */
    public boolean hasAttributes() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'attributes' field */
    public org.bdgenomics.formats.avro.VariantCallingAnnotations.Builder clearAttributes() {
      attributes = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    public VariantCallingAnnotations build() {
      try {
        VariantCallingAnnotations record = new VariantCallingAnnotations();
        record.variantIsPassing = fieldSetFlags()[0] ? this.variantIsPassing : (java.lang.Boolean) defaultValue(fields()[0]);
        record.variantFilters = fieldSetFlags()[1] ? this.variantFilters : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[1]);
        record.downsampled = fieldSetFlags()[2] ? this.downsampled : (java.lang.Boolean) defaultValue(fields()[2]);
        record.baseQRankSum = fieldSetFlags()[3] ? this.baseQRankSum : (java.lang.Float) defaultValue(fields()[3]);
        record.fisherStrandBiasPValue = fieldSetFlags()[4] ? this.fisherStrandBiasPValue : (java.lang.Float) defaultValue(fields()[4]);
        record.rmsMapQ = fieldSetFlags()[5] ? this.rmsMapQ : (java.lang.Float) defaultValue(fields()[5]);
        record.mapq0Reads = fieldSetFlags()[6] ? this.mapq0Reads : (java.lang.Integer) defaultValue(fields()[6]);
        record.mqRankSum = fieldSetFlags()[7] ? this.mqRankSum : (java.lang.Float) defaultValue(fields()[7]);
        record.readPositionRankSum = fieldSetFlags()[8] ? this.readPositionRankSum : (java.lang.Float) defaultValue(fields()[8]);
        record.genotypePriors = fieldSetFlags()[9] ? this.genotypePriors : (java.util.List<java.lang.Float>) defaultValue(fields()[9]);
        record.genotypePosteriors = fieldSetFlags()[10] ? this.genotypePosteriors : (java.util.List<java.lang.Float>) defaultValue(fields()[10]);
        record.vqslod = fieldSetFlags()[11] ? this.vqslod : (java.lang.Float) defaultValue(fields()[11]);
        record.culprit = fieldSetFlags()[12] ? this.culprit : (java.lang.CharSequence) defaultValue(fields()[12]);
        record.attributes = fieldSetFlags()[13] ? this.attributes : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[13]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
