/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.bdgenomics.formats.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Phenotype extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Phenotype\",\"namespace\":\"org.bdgenomics.formats.avro\",\"fields\":[{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"doc\":\"Name of the phenotype (e.g. 'left lower extremity amputation').\",\"default\":null},{\"name\":\"phenotypeGroup\",\"type\":[\"null\",\"string\"],\"doc\":\"Group of the phenotype (e.g. 'eye color').\",\"default\":null},{\"name\":\"phenotypeType\",\"type\":[\"null\",\"string\"],\"doc\":\"Type of the phenotype (e.g. 'measure', 'diagnosis', 'prescription').\",\"default\":null},{\"name\":\"measure\",\"type\":[\"null\",\"string\"],\"doc\":\"Qualitative (\\\"0\\\", or \\\"1\\\") or quantitative measure or observation on the \\n   individual.\",\"default\":null},{\"name\":\"measureDataType\",\"type\":{\"type\":\"enum\",\"name\":\"MeasureDataType\",\"symbols\":[\"Unknown\",\"Boolean\",\"Integer\",\"Decimal\"]},\"doc\":\"Native data type of the measure (e.g. 'boolean', 'integer', 'decimal').\",\"default\":\"Unknown\"},{\"name\":\"measureUnits\",\"type\":[\"null\",\"string\"],\"doc\":\"Units of the measure (e.g. 'umol/L', 'beats/minute').\",\"default\":null},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"doc\":\"Long description of the phenotype.\",\"default\":null},{\"name\":\"diagnosisDateEpoch\",\"type\":[\"null\",\"long\"],\"doc\":\"Date of the diagnosis (if any).\\n\\n   Stored as a number of milliseconds since the UNIX Epoch \\n   (Jan. 1st 1970 at 00:00:00 in UTC timezone).\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Name of the phenotype (e.g. 'left lower extremity amputation'). */
  @Deprecated public java.lang.CharSequence name;
  /** Group of the phenotype (e.g. 'eye color'). */
  @Deprecated public java.lang.CharSequence phenotypeGroup;
  /** Type of the phenotype (e.g. 'measure', 'diagnosis', 'prescription'). */
  @Deprecated public java.lang.CharSequence phenotypeType;
  /** Qualitative ("0", or "1") or quantitative measure or observation on the 
   individual. */
  @Deprecated public java.lang.CharSequence measure;
  /** Native data type of the measure (e.g. 'boolean', 'integer', 'decimal'). */
  @Deprecated public org.bdgenomics.formats.avro.MeasureDataType measureDataType;
  /** Units of the measure (e.g. 'umol/L', 'beats/minute'). */
  @Deprecated public java.lang.CharSequence measureUnits;
  /** Long description of the phenotype. */
  @Deprecated public java.lang.CharSequence description;
  /** Date of the diagnosis (if any).

   Stored as a number of milliseconds since the UNIX Epoch 
   (Jan. 1st 1970 at 00:00:00 in UTC timezone). */
  @Deprecated public java.lang.Long diagnosisDateEpoch;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Phenotype() {}

  /**
   * All-args constructor.
   */
  public Phenotype(java.lang.CharSequence name, java.lang.CharSequence phenotypeGroup, java.lang.CharSequence phenotypeType, java.lang.CharSequence measure, org.bdgenomics.formats.avro.MeasureDataType measureDataType, java.lang.CharSequence measureUnits, java.lang.CharSequence description, java.lang.Long diagnosisDateEpoch) {
    this.name = name;
    this.phenotypeGroup = phenotypeGroup;
    this.phenotypeType = phenotypeType;
    this.measure = measure;
    this.measureDataType = measureDataType;
    this.measureUnits = measureUnits;
    this.description = description;
    this.diagnosisDateEpoch = diagnosisDateEpoch;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return phenotypeGroup;
    case 2: return phenotypeType;
    case 3: return measure;
    case 4: return measureDataType;
    case 5: return measureUnits;
    case 6: return description;
    case 7: return diagnosisDateEpoch;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)value$; break;
    case 1: phenotypeGroup = (java.lang.CharSequence)value$; break;
    case 2: phenotypeType = (java.lang.CharSequence)value$; break;
    case 3: measure = (java.lang.CharSequence)value$; break;
    case 4: measureDataType = (org.bdgenomics.formats.avro.MeasureDataType)value$; break;
    case 5: measureUnits = (java.lang.CharSequence)value$; break;
    case 6: description = (java.lang.CharSequence)value$; break;
    case 7: diagnosisDateEpoch = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * Name of the phenotype (e.g. 'left lower extremity amputation').   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * Name of the phenotype (e.g. 'left lower extremity amputation').   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'phenotypeGroup' field.
   * Group of the phenotype (e.g. 'eye color').   */
  public java.lang.CharSequence getPhenotypeGroup() {
    return phenotypeGroup;
  }

  /**
   * Sets the value of the 'phenotypeGroup' field.
   * Group of the phenotype (e.g. 'eye color').   * @param value the value to set.
   */
  public void setPhenotypeGroup(java.lang.CharSequence value) {
    this.phenotypeGroup = value;
  }

  /**
   * Gets the value of the 'phenotypeType' field.
   * Type of the phenotype (e.g. 'measure', 'diagnosis', 'prescription').   */
  public java.lang.CharSequence getPhenotypeType() {
    return phenotypeType;
  }

  /**
   * Sets the value of the 'phenotypeType' field.
   * Type of the phenotype (e.g. 'measure', 'diagnosis', 'prescription').   * @param value the value to set.
   */
  public void setPhenotypeType(java.lang.CharSequence value) {
    this.phenotypeType = value;
  }

  /**
   * Gets the value of the 'measure' field.
   * Qualitative ("0", or "1") or quantitative measure or observation on the 
   individual.   */
  public java.lang.CharSequence getMeasure() {
    return measure;
  }

  /**
   * Sets the value of the 'measure' field.
   * Qualitative ("0", or "1") or quantitative measure or observation on the 
   individual.   * @param value the value to set.
   */
  public void setMeasure(java.lang.CharSequence value) {
    this.measure = value;
  }

  /**
   * Gets the value of the 'measureDataType' field.
   * Native data type of the measure (e.g. 'boolean', 'integer', 'decimal').   */
  public org.bdgenomics.formats.avro.MeasureDataType getMeasureDataType() {
    return measureDataType;
  }

  /**
   * Sets the value of the 'measureDataType' field.
   * Native data type of the measure (e.g. 'boolean', 'integer', 'decimal').   * @param value the value to set.
   */
  public void setMeasureDataType(org.bdgenomics.formats.avro.MeasureDataType value) {
    this.measureDataType = value;
  }

  /**
   * Gets the value of the 'measureUnits' field.
   * Units of the measure (e.g. 'umol/L', 'beats/minute').   */
  public java.lang.CharSequence getMeasureUnits() {
    return measureUnits;
  }

  /**
   * Sets the value of the 'measureUnits' field.
   * Units of the measure (e.g. 'umol/L', 'beats/minute').   * @param value the value to set.
   */
  public void setMeasureUnits(java.lang.CharSequence value) {
    this.measureUnits = value;
  }

  /**
   * Gets the value of the 'description' field.
   * Long description of the phenotype.   */
  public java.lang.CharSequence getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * Long description of the phenotype.   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'diagnosisDateEpoch' field.
   * Date of the diagnosis (if any).

   Stored as a number of milliseconds since the UNIX Epoch 
   (Jan. 1st 1970 at 00:00:00 in UTC timezone).   */
  public java.lang.Long getDiagnosisDateEpoch() {
    return diagnosisDateEpoch;
  }

  /**
   * Sets the value of the 'diagnosisDateEpoch' field.
   * Date of the diagnosis (if any).

   Stored as a number of milliseconds since the UNIX Epoch 
   (Jan. 1st 1970 at 00:00:00 in UTC timezone).   * @param value the value to set.
   */
  public void setDiagnosisDateEpoch(java.lang.Long value) {
    this.diagnosisDateEpoch = value;
  }

  /** Creates a new Phenotype RecordBuilder */
  public static org.bdgenomics.formats.avro.Phenotype.Builder newBuilder() {
    return new org.bdgenomics.formats.avro.Phenotype.Builder();
  }
  
  /** Creates a new Phenotype RecordBuilder by copying an existing Builder */
  public static org.bdgenomics.formats.avro.Phenotype.Builder newBuilder(org.bdgenomics.formats.avro.Phenotype.Builder other) {
    return new org.bdgenomics.formats.avro.Phenotype.Builder(other);
  }
  
  /** Creates a new Phenotype RecordBuilder by copying an existing Phenotype instance */
  public static org.bdgenomics.formats.avro.Phenotype.Builder newBuilder(org.bdgenomics.formats.avro.Phenotype other) {
    return new org.bdgenomics.formats.avro.Phenotype.Builder(other);
  }
  
  /**
   * RecordBuilder for Phenotype instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Phenotype>
    implements org.apache.avro.data.RecordBuilder<Phenotype> {

    private java.lang.CharSequence name;
    private java.lang.CharSequence phenotypeGroup;
    private java.lang.CharSequence phenotypeType;
    private java.lang.CharSequence measure;
    private org.bdgenomics.formats.avro.MeasureDataType measureDataType;
    private java.lang.CharSequence measureUnits;
    private java.lang.CharSequence description;
    private java.lang.Long diagnosisDateEpoch;

    /** Creates a new Builder */
    private Builder() {
      super(org.bdgenomics.formats.avro.Phenotype.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.bdgenomics.formats.avro.Phenotype.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.phenotypeGroup)) {
        this.phenotypeGroup = data().deepCopy(fields()[1].schema(), other.phenotypeGroup);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.phenotypeType)) {
        this.phenotypeType = data().deepCopy(fields()[2].schema(), other.phenotypeType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.measure)) {
        this.measure = data().deepCopy(fields()[3].schema(), other.measure);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.measureDataType)) {
        this.measureDataType = data().deepCopy(fields()[4].schema(), other.measureDataType);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.measureUnits)) {
        this.measureUnits = data().deepCopy(fields()[5].schema(), other.measureUnits);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.description)) {
        this.description = data().deepCopy(fields()[6].schema(), other.description);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.diagnosisDateEpoch)) {
        this.diagnosisDateEpoch = data().deepCopy(fields()[7].schema(), other.diagnosisDateEpoch);
        fieldSetFlags()[7] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Phenotype instance */
    private Builder(org.bdgenomics.formats.avro.Phenotype other) {
            super(org.bdgenomics.formats.avro.Phenotype.SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.phenotypeGroup)) {
        this.phenotypeGroup = data().deepCopy(fields()[1].schema(), other.phenotypeGroup);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.phenotypeType)) {
        this.phenotypeType = data().deepCopy(fields()[2].schema(), other.phenotypeType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.measure)) {
        this.measure = data().deepCopy(fields()[3].schema(), other.measure);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.measureDataType)) {
        this.measureDataType = data().deepCopy(fields()[4].schema(), other.measureDataType);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.measureUnits)) {
        this.measureUnits = data().deepCopy(fields()[5].schema(), other.measureUnits);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.description)) {
        this.description = data().deepCopy(fields()[6].schema(), other.description);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.diagnosisDateEpoch)) {
        this.diagnosisDateEpoch = data().deepCopy(fields()[7].schema(), other.diagnosisDateEpoch);
        fieldSetFlags()[7] = true;
      }
    }

    /** Gets the value of the 'name' field */
    public java.lang.CharSequence getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public org.bdgenomics.formats.avro.Phenotype.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'name' field */
    public org.bdgenomics.formats.avro.Phenotype.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'phenotypeGroup' field */
    public java.lang.CharSequence getPhenotypeGroup() {
      return phenotypeGroup;
    }
    
    /** Sets the value of the 'phenotypeGroup' field */
    public org.bdgenomics.formats.avro.Phenotype.Builder setPhenotypeGroup(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.phenotypeGroup = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'phenotypeGroup' field has been set */
    public boolean hasPhenotypeGroup() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'phenotypeGroup' field */
    public org.bdgenomics.formats.avro.Phenotype.Builder clearPhenotypeGroup() {
      phenotypeGroup = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'phenotypeType' field */
    public java.lang.CharSequence getPhenotypeType() {
      return phenotypeType;
    }
    
    /** Sets the value of the 'phenotypeType' field */
    public org.bdgenomics.formats.avro.Phenotype.Builder setPhenotypeType(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.phenotypeType = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'phenotypeType' field has been set */
    public boolean hasPhenotypeType() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'phenotypeType' field */
    public org.bdgenomics.formats.avro.Phenotype.Builder clearPhenotypeType() {
      phenotypeType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'measure' field */
    public java.lang.CharSequence getMeasure() {
      return measure;
    }
    
    /** Sets the value of the 'measure' field */
    public org.bdgenomics.formats.avro.Phenotype.Builder setMeasure(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.measure = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'measure' field has been set */
    public boolean hasMeasure() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'measure' field */
    public org.bdgenomics.formats.avro.Phenotype.Builder clearMeasure() {
      measure = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'measureDataType' field */
    public org.bdgenomics.formats.avro.MeasureDataType getMeasureDataType() {
      return measureDataType;
    }
    
    /** Sets the value of the 'measureDataType' field */
    public org.bdgenomics.formats.avro.Phenotype.Builder setMeasureDataType(org.bdgenomics.formats.avro.MeasureDataType value) {
      validate(fields()[4], value);
      this.measureDataType = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'measureDataType' field has been set */
    public boolean hasMeasureDataType() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'measureDataType' field */
    public org.bdgenomics.formats.avro.Phenotype.Builder clearMeasureDataType() {
      measureDataType = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'measureUnits' field */
    public java.lang.CharSequence getMeasureUnits() {
      return measureUnits;
    }
    
    /** Sets the value of the 'measureUnits' field */
    public org.bdgenomics.formats.avro.Phenotype.Builder setMeasureUnits(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.measureUnits = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'measureUnits' field has been set */
    public boolean hasMeasureUnits() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'measureUnits' field */
    public org.bdgenomics.formats.avro.Phenotype.Builder clearMeasureUnits() {
      measureUnits = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'description' field */
    public java.lang.CharSequence getDescription() {
      return description;
    }
    
    /** Sets the value of the 'description' field */
    public org.bdgenomics.formats.avro.Phenotype.Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.description = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'description' field has been set */
    public boolean hasDescription() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'description' field */
    public org.bdgenomics.formats.avro.Phenotype.Builder clearDescription() {
      description = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'diagnosisDateEpoch' field */
    public java.lang.Long getDiagnosisDateEpoch() {
      return diagnosisDateEpoch;
    }
    
    /** Sets the value of the 'diagnosisDateEpoch' field */
    public org.bdgenomics.formats.avro.Phenotype.Builder setDiagnosisDateEpoch(java.lang.Long value) {
      validate(fields()[7], value);
      this.diagnosisDateEpoch = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'diagnosisDateEpoch' field has been set */
    public boolean hasDiagnosisDateEpoch() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'diagnosisDateEpoch' field */
    public org.bdgenomics.formats.avro.Phenotype.Builder clearDiagnosisDateEpoch() {
      diagnosisDateEpoch = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    public Phenotype build() {
      try {
        Phenotype record = new Phenotype();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.phenotypeGroup = fieldSetFlags()[1] ? this.phenotypeGroup : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.phenotypeType = fieldSetFlags()[2] ? this.phenotypeType : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.measure = fieldSetFlags()[3] ? this.measure : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.measureDataType = fieldSetFlags()[4] ? this.measureDataType : (org.bdgenomics.formats.avro.MeasureDataType) defaultValue(fields()[4]);
        record.measureUnits = fieldSetFlags()[5] ? this.measureUnits : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.description = fieldSetFlags()[6] ? this.description : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.diagnosisDateEpoch = fieldSetFlags()[7] ? this.diagnosisDateEpoch : (java.lang.Long) defaultValue(fields()[7]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
