/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.bdgenomics.formats.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class VariantEffect extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"VariantEffect\",\"namespace\":\"org.bdgenomics.formats.avro\",\"fields\":[{\"name\":\"hgvs\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"referenceAminoAcid\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"alternateAminoAcid\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"geneId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"transcriptId\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence hgvs;
  @Deprecated public java.lang.CharSequence referenceAminoAcid;
  @Deprecated public java.lang.CharSequence alternateAminoAcid;
  @Deprecated public java.lang.CharSequence geneId;
  @Deprecated public java.lang.CharSequence transcriptId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public VariantEffect() {}

  /**
   * All-args constructor.
   */
  public VariantEffect(java.lang.CharSequence hgvs, java.lang.CharSequence referenceAminoAcid, java.lang.CharSequence alternateAminoAcid, java.lang.CharSequence geneId, java.lang.CharSequence transcriptId) {
    this.hgvs = hgvs;
    this.referenceAminoAcid = referenceAminoAcid;
    this.alternateAminoAcid = alternateAminoAcid;
    this.geneId = geneId;
    this.transcriptId = transcriptId;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return hgvs;
    case 1: return referenceAminoAcid;
    case 2: return alternateAminoAcid;
    case 3: return geneId;
    case 4: return transcriptId;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: hgvs = (java.lang.CharSequence)value$; break;
    case 1: referenceAminoAcid = (java.lang.CharSequence)value$; break;
    case 2: alternateAminoAcid = (java.lang.CharSequence)value$; break;
    case 3: geneId = (java.lang.CharSequence)value$; break;
    case 4: transcriptId = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'hgvs' field.
   */
  public java.lang.CharSequence getHgvs() {
    return hgvs;
  }

  /**
   * Sets the value of the 'hgvs' field.
   * @param value the value to set.
   */
  public void setHgvs(java.lang.CharSequence value) {
    this.hgvs = value;
  }

  /**
   * Gets the value of the 'referenceAminoAcid' field.
   */
  public java.lang.CharSequence getReferenceAminoAcid() {
    return referenceAminoAcid;
  }

  /**
   * Sets the value of the 'referenceAminoAcid' field.
   * @param value the value to set.
   */
  public void setReferenceAminoAcid(java.lang.CharSequence value) {
    this.referenceAminoAcid = value;
  }

  /**
   * Gets the value of the 'alternateAminoAcid' field.
   */
  public java.lang.CharSequence getAlternateAminoAcid() {
    return alternateAminoAcid;
  }

  /**
   * Sets the value of the 'alternateAminoAcid' field.
   * @param value the value to set.
   */
  public void setAlternateAminoAcid(java.lang.CharSequence value) {
    this.alternateAminoAcid = value;
  }

  /**
   * Gets the value of the 'geneId' field.
   */
  public java.lang.CharSequence getGeneId() {
    return geneId;
  }

  /**
   * Sets the value of the 'geneId' field.
   * @param value the value to set.
   */
  public void setGeneId(java.lang.CharSequence value) {
    this.geneId = value;
  }

  /**
   * Gets the value of the 'transcriptId' field.
   */
  public java.lang.CharSequence getTranscriptId() {
    return transcriptId;
  }

  /**
   * Sets the value of the 'transcriptId' field.
   * @param value the value to set.
   */
  public void setTranscriptId(java.lang.CharSequence value) {
    this.transcriptId = value;
  }

  /** Creates a new VariantEffect RecordBuilder */
  public static org.bdgenomics.formats.avro.VariantEffect.Builder newBuilder() {
    return new org.bdgenomics.formats.avro.VariantEffect.Builder();
  }
  
  /** Creates a new VariantEffect RecordBuilder by copying an existing Builder */
  public static org.bdgenomics.formats.avro.VariantEffect.Builder newBuilder(org.bdgenomics.formats.avro.VariantEffect.Builder other) {
    return new org.bdgenomics.formats.avro.VariantEffect.Builder(other);
  }
  
  /** Creates a new VariantEffect RecordBuilder by copying an existing VariantEffect instance */
  public static org.bdgenomics.formats.avro.VariantEffect.Builder newBuilder(org.bdgenomics.formats.avro.VariantEffect other) {
    return new org.bdgenomics.formats.avro.VariantEffect.Builder(other);
  }
  
  /**
   * RecordBuilder for VariantEffect instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<VariantEffect>
    implements org.apache.avro.data.RecordBuilder<VariantEffect> {

    private java.lang.CharSequence hgvs;
    private java.lang.CharSequence referenceAminoAcid;
    private java.lang.CharSequence alternateAminoAcid;
    private java.lang.CharSequence geneId;
    private java.lang.CharSequence transcriptId;

    /** Creates a new Builder */
    private Builder() {
      super(org.bdgenomics.formats.avro.VariantEffect.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.bdgenomics.formats.avro.VariantEffect.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.hgvs)) {
        this.hgvs = data().deepCopy(fields()[0].schema(), other.hgvs);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.referenceAminoAcid)) {
        this.referenceAminoAcid = data().deepCopy(fields()[1].schema(), other.referenceAminoAcid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.alternateAminoAcid)) {
        this.alternateAminoAcid = data().deepCopy(fields()[2].schema(), other.alternateAminoAcid);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.geneId)) {
        this.geneId = data().deepCopy(fields()[3].schema(), other.geneId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.transcriptId)) {
        this.transcriptId = data().deepCopy(fields()[4].schema(), other.transcriptId);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing VariantEffect instance */
    private Builder(org.bdgenomics.formats.avro.VariantEffect other) {
            super(org.bdgenomics.formats.avro.VariantEffect.SCHEMA$);
      if (isValidValue(fields()[0], other.hgvs)) {
        this.hgvs = data().deepCopy(fields()[0].schema(), other.hgvs);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.referenceAminoAcid)) {
        this.referenceAminoAcid = data().deepCopy(fields()[1].schema(), other.referenceAminoAcid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.alternateAminoAcid)) {
        this.alternateAminoAcid = data().deepCopy(fields()[2].schema(), other.alternateAminoAcid);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.geneId)) {
        this.geneId = data().deepCopy(fields()[3].schema(), other.geneId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.transcriptId)) {
        this.transcriptId = data().deepCopy(fields()[4].schema(), other.transcriptId);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'hgvs' field */
    public java.lang.CharSequence getHgvs() {
      return hgvs;
    }
    
    /** Sets the value of the 'hgvs' field */
    public org.bdgenomics.formats.avro.VariantEffect.Builder setHgvs(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.hgvs = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'hgvs' field has been set */
    public boolean hasHgvs() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'hgvs' field */
    public org.bdgenomics.formats.avro.VariantEffect.Builder clearHgvs() {
      hgvs = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'referenceAminoAcid' field */
    public java.lang.CharSequence getReferenceAminoAcid() {
      return referenceAminoAcid;
    }
    
    /** Sets the value of the 'referenceAminoAcid' field */
    public org.bdgenomics.formats.avro.VariantEffect.Builder setReferenceAminoAcid(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.referenceAminoAcid = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'referenceAminoAcid' field has been set */
    public boolean hasReferenceAminoAcid() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'referenceAminoAcid' field */
    public org.bdgenomics.formats.avro.VariantEffect.Builder clearReferenceAminoAcid() {
      referenceAminoAcid = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'alternateAminoAcid' field */
    public java.lang.CharSequence getAlternateAminoAcid() {
      return alternateAminoAcid;
    }
    
    /** Sets the value of the 'alternateAminoAcid' field */
    public org.bdgenomics.formats.avro.VariantEffect.Builder setAlternateAminoAcid(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.alternateAminoAcid = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'alternateAminoAcid' field has been set */
    public boolean hasAlternateAminoAcid() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'alternateAminoAcid' field */
    public org.bdgenomics.formats.avro.VariantEffect.Builder clearAlternateAminoAcid() {
      alternateAminoAcid = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'geneId' field */
    public java.lang.CharSequence getGeneId() {
      return geneId;
    }
    
    /** Sets the value of the 'geneId' field */
    public org.bdgenomics.formats.avro.VariantEffect.Builder setGeneId(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.geneId = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'geneId' field has been set */
    public boolean hasGeneId() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'geneId' field */
    public org.bdgenomics.formats.avro.VariantEffect.Builder clearGeneId() {
      geneId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'transcriptId' field */
    public java.lang.CharSequence getTranscriptId() {
      return transcriptId;
    }
    
    /** Sets the value of the 'transcriptId' field */
    public org.bdgenomics.formats.avro.VariantEffect.Builder setTranscriptId(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.transcriptId = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'transcriptId' field has been set */
    public boolean hasTranscriptId() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'transcriptId' field */
    public org.bdgenomics.formats.avro.VariantEffect.Builder clearTranscriptId() {
      transcriptId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public VariantEffect build() {
      try {
        VariantEffect record = new VariantEffect();
        record.hgvs = fieldSetFlags()[0] ? this.hgvs : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.referenceAminoAcid = fieldSetFlags()[1] ? this.referenceAminoAcid : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.alternateAminoAcid = fieldSetFlags()[2] ? this.alternateAminoAcid : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.geneId = fieldSetFlags()[3] ? this.geneId : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.transcriptId = fieldSetFlags()[4] ? this.transcriptId : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
