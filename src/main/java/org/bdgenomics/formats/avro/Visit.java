/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.bdgenomics.formats.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Visit extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Visit\",\"namespace\":\"org.bdgenomics.formats.avro\",\"fields\":[{\"name\":\"visitId\",\"type\":[\"null\",\"string\"],\"doc\":\"Unique ID of the visit. Often useful to backtrack the visit on \\n   an external database.\",\"default\":null},{\"name\":\"visitDateEpoch\",\"type\":[\"null\",\"long\"],\"doc\":\"Date of the visit.\\n\\n   Stored as a number of milliseconds since the UNIX Epoch \\n   (Jan. 1st 1970 at 00:00:00 in UTC timezone).\",\"default\":null},{\"name\":\"studyId\",\"type\":[\"null\",\"string\"],\"doc\":\"ID of the consent form that the user signed at the visit.\",\"default\":null},{\"name\":\"isFasting\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Indicates if the patient was fasting or not during the visit\\n   (null if unknown).\",\"default\":null},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"doc\":\"Description of the visit.\",\"default\":null},{\"name\":\"phenotypes\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Phenotype\",\"fields\":[{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"doc\":\"Name of the phenotype (e.g. 'left lower extremity amputation').\",\"default\":null},{\"name\":\"phenotypeGroup\",\"type\":[\"null\",\"string\"],\"doc\":\"Group of the phenotype (e.g. 'eye color').\",\"default\":null},{\"name\":\"phenotypeType\",\"type\":[\"null\",\"string\"],\"doc\":\"Type of the phenotype (e.g. 'measure', 'diagnosis', 'prescription').\",\"default\":null},{\"name\":\"measure\",\"type\":[\"null\",\"string\"],\"doc\":\"Qualitative (\\\"0\\\", or \\\"1\\\") or quantitative measure or observation on the \\n   individual.\",\"default\":null},{\"name\":\"measureDataType\",\"type\":{\"type\":\"enum\",\"name\":\"MeasureDataType\",\"symbols\":[\"Unknown\",\"Boolean\",\"Integer\",\"Decimal\"]},\"doc\":\"Native data type of the measure (e.g. 'boolean', 'integer', 'decimal').\",\"default\":\"Unknown\"},{\"name\":\"measureUnits\",\"type\":[\"null\",\"string\"],\"doc\":\"Units of the measure (e.g. 'umol/L', 'beats/minute').\",\"default\":null},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"doc\":\"Long description of the phenotype.\",\"default\":null},{\"name\":\"diagnosisDateEpoch\",\"type\":[\"null\",\"long\"],\"doc\":\"Date of the diagnosis (if any).\\n\\n   Stored as a number of milliseconds since the UNIX Epoch \\n   (Jan. 1st 1970 at 00:00:00 in UTC timezone).\",\"default\":null}]}},\"doc\":\"An array containing all the phenotypes collected during the visit.\",\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Unique ID of the visit. Often useful to backtrack the visit on 
   an external database. */
  @Deprecated public java.lang.CharSequence visitId;
  /** Date of the visit.

   Stored as a number of milliseconds since the UNIX Epoch 
   (Jan. 1st 1970 at 00:00:00 in UTC timezone). */
  @Deprecated public java.lang.Long visitDateEpoch;
  /** ID of the consent form that the user signed at the visit. */
  @Deprecated public java.lang.CharSequence studyId;
  /** Indicates if the patient was fasting or not during the visit
   (null if unknown). */
  @Deprecated public java.lang.Boolean isFasting;
  /** Description of the visit. */
  @Deprecated public java.lang.CharSequence description;
  /** An array containing all the phenotypes collected during the visit. */
  @Deprecated public java.util.List<org.bdgenomics.formats.avro.Phenotype> phenotypes;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Visit() {}

  /**
   * All-args constructor.
   */
  public Visit(java.lang.CharSequence visitId, java.lang.Long visitDateEpoch, java.lang.CharSequence studyId, java.lang.Boolean isFasting, java.lang.CharSequence description, java.util.List<org.bdgenomics.formats.avro.Phenotype> phenotypes) {
    this.visitId = visitId;
    this.visitDateEpoch = visitDateEpoch;
    this.studyId = studyId;
    this.isFasting = isFasting;
    this.description = description;
    this.phenotypes = phenotypes;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return visitId;
    case 1: return visitDateEpoch;
    case 2: return studyId;
    case 3: return isFasting;
    case 4: return description;
    case 5: return phenotypes;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: visitId = (java.lang.CharSequence)value$; break;
    case 1: visitDateEpoch = (java.lang.Long)value$; break;
    case 2: studyId = (java.lang.CharSequence)value$; break;
    case 3: isFasting = (java.lang.Boolean)value$; break;
    case 4: description = (java.lang.CharSequence)value$; break;
    case 5: phenotypes = (java.util.List<org.bdgenomics.formats.avro.Phenotype>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'visitId' field.
   * Unique ID of the visit. Often useful to backtrack the visit on 
   an external database.   */
  public java.lang.CharSequence getVisitId() {
    return visitId;
  }

  /**
   * Sets the value of the 'visitId' field.
   * Unique ID of the visit. Often useful to backtrack the visit on 
   an external database.   * @param value the value to set.
   */
  public void setVisitId(java.lang.CharSequence value) {
    this.visitId = value;
  }

  /**
   * Gets the value of the 'visitDateEpoch' field.
   * Date of the visit.

   Stored as a number of milliseconds since the UNIX Epoch 
   (Jan. 1st 1970 at 00:00:00 in UTC timezone).   */
  public java.lang.Long getVisitDateEpoch() {
    return visitDateEpoch;
  }

  /**
   * Sets the value of the 'visitDateEpoch' field.
   * Date of the visit.

   Stored as a number of milliseconds since the UNIX Epoch 
   (Jan. 1st 1970 at 00:00:00 in UTC timezone).   * @param value the value to set.
   */
  public void setVisitDateEpoch(java.lang.Long value) {
    this.visitDateEpoch = value;
  }

  /**
   * Gets the value of the 'studyId' field.
   * ID of the consent form that the user signed at the visit.   */
  public java.lang.CharSequence getStudyId() {
    return studyId;
  }

  /**
   * Sets the value of the 'studyId' field.
   * ID of the consent form that the user signed at the visit.   * @param value the value to set.
   */
  public void setStudyId(java.lang.CharSequence value) {
    this.studyId = value;
  }

  /**
   * Gets the value of the 'isFasting' field.
   * Indicates if the patient was fasting or not during the visit
   (null if unknown).   */
  public java.lang.Boolean getIsFasting() {
    return isFasting;
  }

  /**
   * Sets the value of the 'isFasting' field.
   * Indicates if the patient was fasting or not during the visit
   (null if unknown).   * @param value the value to set.
   */
  public void setIsFasting(java.lang.Boolean value) {
    this.isFasting = value;
  }

  /**
   * Gets the value of the 'description' field.
   * Description of the visit.   */
  public java.lang.CharSequence getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * Description of the visit.   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'phenotypes' field.
   * An array containing all the phenotypes collected during the visit.   */
  public java.util.List<org.bdgenomics.formats.avro.Phenotype> getPhenotypes() {
    return phenotypes;
  }

  /**
   * Sets the value of the 'phenotypes' field.
   * An array containing all the phenotypes collected during the visit.   * @param value the value to set.
   */
  public void setPhenotypes(java.util.List<org.bdgenomics.formats.avro.Phenotype> value) {
    this.phenotypes = value;
  }

  /** Creates a new Visit RecordBuilder */
  public static org.bdgenomics.formats.avro.Visit.Builder newBuilder() {
    return new org.bdgenomics.formats.avro.Visit.Builder();
  }
  
  /** Creates a new Visit RecordBuilder by copying an existing Builder */
  public static org.bdgenomics.formats.avro.Visit.Builder newBuilder(org.bdgenomics.formats.avro.Visit.Builder other) {
    return new org.bdgenomics.formats.avro.Visit.Builder(other);
  }
  
  /** Creates a new Visit RecordBuilder by copying an existing Visit instance */
  public static org.bdgenomics.formats.avro.Visit.Builder newBuilder(org.bdgenomics.formats.avro.Visit other) {
    return new org.bdgenomics.formats.avro.Visit.Builder(other);
  }
  
  /**
   * RecordBuilder for Visit instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Visit>
    implements org.apache.avro.data.RecordBuilder<Visit> {

    private java.lang.CharSequence visitId;
    private java.lang.Long visitDateEpoch;
    private java.lang.CharSequence studyId;
    private java.lang.Boolean isFasting;
    private java.lang.CharSequence description;
    private java.util.List<org.bdgenomics.formats.avro.Phenotype> phenotypes;

    /** Creates a new Builder */
    private Builder() {
      super(org.bdgenomics.formats.avro.Visit.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.bdgenomics.formats.avro.Visit.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.visitId)) {
        this.visitId = data().deepCopy(fields()[0].schema(), other.visitId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.visitDateEpoch)) {
        this.visitDateEpoch = data().deepCopy(fields()[1].schema(), other.visitDateEpoch);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.studyId)) {
        this.studyId = data().deepCopy(fields()[2].schema(), other.studyId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.isFasting)) {
        this.isFasting = data().deepCopy(fields()[3].schema(), other.isFasting);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.description)) {
        this.description = data().deepCopy(fields()[4].schema(), other.description);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.phenotypes)) {
        this.phenotypes = data().deepCopy(fields()[5].schema(), other.phenotypes);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Visit instance */
    private Builder(org.bdgenomics.formats.avro.Visit other) {
            super(org.bdgenomics.formats.avro.Visit.SCHEMA$);
      if (isValidValue(fields()[0], other.visitId)) {
        this.visitId = data().deepCopy(fields()[0].schema(), other.visitId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.visitDateEpoch)) {
        this.visitDateEpoch = data().deepCopy(fields()[1].schema(), other.visitDateEpoch);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.studyId)) {
        this.studyId = data().deepCopy(fields()[2].schema(), other.studyId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.isFasting)) {
        this.isFasting = data().deepCopy(fields()[3].schema(), other.isFasting);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.description)) {
        this.description = data().deepCopy(fields()[4].schema(), other.description);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.phenotypes)) {
        this.phenotypes = data().deepCopy(fields()[5].schema(), other.phenotypes);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'visitId' field */
    public java.lang.CharSequence getVisitId() {
      return visitId;
    }
    
    /** Sets the value of the 'visitId' field */
    public org.bdgenomics.formats.avro.Visit.Builder setVisitId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.visitId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'visitId' field has been set */
    public boolean hasVisitId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'visitId' field */
    public org.bdgenomics.formats.avro.Visit.Builder clearVisitId() {
      visitId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'visitDateEpoch' field */
    public java.lang.Long getVisitDateEpoch() {
      return visitDateEpoch;
    }
    
    /** Sets the value of the 'visitDateEpoch' field */
    public org.bdgenomics.formats.avro.Visit.Builder setVisitDateEpoch(java.lang.Long value) {
      validate(fields()[1], value);
      this.visitDateEpoch = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'visitDateEpoch' field has been set */
    public boolean hasVisitDateEpoch() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'visitDateEpoch' field */
    public org.bdgenomics.formats.avro.Visit.Builder clearVisitDateEpoch() {
      visitDateEpoch = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'studyId' field */
    public java.lang.CharSequence getStudyId() {
      return studyId;
    }
    
    /** Sets the value of the 'studyId' field */
    public org.bdgenomics.formats.avro.Visit.Builder setStudyId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.studyId = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'studyId' field has been set */
    public boolean hasStudyId() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'studyId' field */
    public org.bdgenomics.formats.avro.Visit.Builder clearStudyId() {
      studyId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'isFasting' field */
    public java.lang.Boolean getIsFasting() {
      return isFasting;
    }
    
    /** Sets the value of the 'isFasting' field */
    public org.bdgenomics.formats.avro.Visit.Builder setIsFasting(java.lang.Boolean value) {
      validate(fields()[3], value);
      this.isFasting = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'isFasting' field has been set */
    public boolean hasIsFasting() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'isFasting' field */
    public org.bdgenomics.formats.avro.Visit.Builder clearIsFasting() {
      isFasting = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'description' field */
    public java.lang.CharSequence getDescription() {
      return description;
    }
    
    /** Sets the value of the 'description' field */
    public org.bdgenomics.formats.avro.Visit.Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.description = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'description' field has been set */
    public boolean hasDescription() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'description' field */
    public org.bdgenomics.formats.avro.Visit.Builder clearDescription() {
      description = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'phenotypes' field */
    public java.util.List<org.bdgenomics.formats.avro.Phenotype> getPhenotypes() {
      return phenotypes;
    }
    
    /** Sets the value of the 'phenotypes' field */
    public org.bdgenomics.formats.avro.Visit.Builder setPhenotypes(java.util.List<org.bdgenomics.formats.avro.Phenotype> value) {
      validate(fields()[5], value);
      this.phenotypes = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'phenotypes' field has been set */
    public boolean hasPhenotypes() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'phenotypes' field */
    public org.bdgenomics.formats.avro.Visit.Builder clearPhenotypes() {
      phenotypes = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public Visit build() {
      try {
        Visit record = new Visit();
        record.visitId = fieldSetFlags()[0] ? this.visitId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.visitDateEpoch = fieldSetFlags()[1] ? this.visitDateEpoch : (java.lang.Long) defaultValue(fields()[1]);
        record.studyId = fieldSetFlags()[2] ? this.studyId : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.isFasting = fieldSetFlags()[3] ? this.isFasting : (java.lang.Boolean) defaultValue(fields()[3]);
        record.description = fieldSetFlags()[4] ? this.description : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.phenotypes = fieldSetFlags()[5] ? this.phenotypes : (java.util.List<org.bdgenomics.formats.avro.Phenotype>) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
