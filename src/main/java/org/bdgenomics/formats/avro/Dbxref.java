/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.bdgenomics.formats.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Dbxref extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Dbxref\",\"namespace\":\"org.bdgenomics.formats.avro\",\"fields\":[{\"name\":\"accession\",\"type\":\"string\"},{\"name\":\"db\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence accession;
  @Deprecated public java.lang.CharSequence db;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Dbxref() {}

  /**
   * All-args constructor.
   */
  public Dbxref(java.lang.CharSequence accession, java.lang.CharSequence db) {
    this.accession = accession;
    this.db = db;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return accession;
    case 1: return db;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: accession = (java.lang.CharSequence)value$; break;
    case 1: db = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'accession' field.
   */
  public java.lang.CharSequence getAccession() {
    return accession;
  }

  /**
   * Sets the value of the 'accession' field.
   * @param value the value to set.
   */
  public void setAccession(java.lang.CharSequence value) {
    this.accession = value;
  }

  /**
   * Gets the value of the 'db' field.
   */
  public java.lang.CharSequence getDb() {
    return db;
  }

  /**
   * Sets the value of the 'db' field.
   * @param value the value to set.
   */
  public void setDb(java.lang.CharSequence value) {
    this.db = value;
  }

  /** Creates a new Dbxref RecordBuilder */
  public static org.bdgenomics.formats.avro.Dbxref.Builder newBuilder() {
    return new org.bdgenomics.formats.avro.Dbxref.Builder();
  }
  
  /** Creates a new Dbxref RecordBuilder by copying an existing Builder */
  public static org.bdgenomics.formats.avro.Dbxref.Builder newBuilder(org.bdgenomics.formats.avro.Dbxref.Builder other) {
    return new org.bdgenomics.formats.avro.Dbxref.Builder(other);
  }
  
  /** Creates a new Dbxref RecordBuilder by copying an existing Dbxref instance */
  public static org.bdgenomics.formats.avro.Dbxref.Builder newBuilder(org.bdgenomics.formats.avro.Dbxref other) {
    return new org.bdgenomics.formats.avro.Dbxref.Builder(other);
  }
  
  /**
   * RecordBuilder for Dbxref instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Dbxref>
    implements org.apache.avro.data.RecordBuilder<Dbxref> {

    private java.lang.CharSequence accession;
    private java.lang.CharSequence db;

    /** Creates a new Builder */
    private Builder() {
      super(org.bdgenomics.formats.avro.Dbxref.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.bdgenomics.formats.avro.Dbxref.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.accession)) {
        this.accession = data().deepCopy(fields()[0].schema(), other.accession);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.db)) {
        this.db = data().deepCopy(fields()[1].schema(), other.db);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Dbxref instance */
    private Builder(org.bdgenomics.formats.avro.Dbxref other) {
            super(org.bdgenomics.formats.avro.Dbxref.SCHEMA$);
      if (isValidValue(fields()[0], other.accession)) {
        this.accession = data().deepCopy(fields()[0].schema(), other.accession);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.db)) {
        this.db = data().deepCopy(fields()[1].schema(), other.db);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'accession' field */
    public java.lang.CharSequence getAccession() {
      return accession;
    }
    
    /** Sets the value of the 'accession' field */
    public org.bdgenomics.formats.avro.Dbxref.Builder setAccession(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.accession = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'accession' field has been set */
    public boolean hasAccession() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'accession' field */
    public org.bdgenomics.formats.avro.Dbxref.Builder clearAccession() {
      accession = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'db' field */
    public java.lang.CharSequence getDb() {
      return db;
    }
    
    /** Sets the value of the 'db' field */
    public org.bdgenomics.formats.avro.Dbxref.Builder setDb(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.db = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'db' field has been set */
    public boolean hasDb() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'db' field */
    public org.bdgenomics.formats.avro.Dbxref.Builder clearDb() {
      db = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Dbxref build() {
      try {
        Dbxref record = new Dbxref();
        record.accession = fieldSetFlags()[0] ? this.accession : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.db = fieldSetFlags()[1] ? this.db : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
