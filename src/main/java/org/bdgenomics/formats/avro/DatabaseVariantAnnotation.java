/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.bdgenomics.formats.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DatabaseVariantAnnotation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DatabaseVariantAnnotation\",\"namespace\":\"org.bdgenomics.formats.avro\",\"fields\":[{\"name\":\"variant\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Variant\",\"fields\":[{\"name\":\"variantErrorProbability\",\"type\":[\"null\",\"int\"],\"doc\":\"The Phred scaled error probability of a variant, given the probabilities of\\n   the variant in a population.\",\"default\":null},{\"name\":\"contig\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Contig\",\"doc\":\"Record for describing a reference assembly. Not used for storing the contents\\n of said assembly.\\n\\n @see NucleotideContigFragment\",\"fields\":[{\"name\":\"contigName\",\"type\":[\"null\",\"string\"],\"doc\":\"The name of this contig in the assembly (e.g., \\\"chr1\\\").\",\"default\":null},{\"name\":\"contigLength\",\"type\":[\"null\",\"long\"],\"doc\":\"The length of this contig.\",\"default\":null},{\"name\":\"contigMD5\",\"type\":[\"null\",\"string\"],\"doc\":\"The MD5 checksum of the assembly for this contig.\",\"default\":null},{\"name\":\"referenceURL\",\"type\":[\"null\",\"string\"],\"doc\":\"The URL at which this reference assembly can be found.\",\"default\":null},{\"name\":\"assembly\",\"type\":[\"null\",\"string\"],\"doc\":\"The name of this assembly (e.g., \\\"hg19\\\").\",\"default\":null},{\"name\":\"species\",\"type\":[\"null\",\"string\"],\"doc\":\"The species that this assembly is for.\",\"default\":null},{\"name\":\"referenceIndex\",\"type\":[\"null\",\"int\"],\"doc\":\"Optional 0-based index of this contig in a SAM file header that it was read\\n   from; helps output SAMs/BAMs with headers in the same order as they started\\n   with, before a conversion to ADAM.\",\"default\":null}]}],\"doc\":\"The reference contig that this variant exists on.\",\"default\":null},{\"name\":\"start\",\"type\":[\"null\",\"long\"],\"doc\":\"The 0-based start position of this variant on the reference contig.\",\"default\":null},{\"name\":\"end\",\"type\":[\"null\",\"long\"],\"doc\":\"The 0-based, exclusive end position of this variant on the reference contig.\",\"default\":null},{\"name\":\"referenceAllele\",\"type\":[\"null\",\"string\"],\"doc\":\"A string describing the reference allele at this site.\",\"default\":null},{\"name\":\"alternateAllele\",\"type\":[\"null\",\"string\"],\"doc\":\"A string describing the variant allele at this site. Should be left null if\\n   the site is a structural variant.\",\"default\":null},{\"name\":\"svAllele\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"StructuralVariant\",\"fields\":[{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"StructuralVariantType\",\"doc\":\"Descriptors for the type of a structural variant. The most specific descriptor\\n should be used, if possible. E.g., duplication should be used instead of\\n insertion if the inserted sequence is not novel. Tandem duplication should\\n be used instead of duplication if the duplication is known to follow the\\n duplicated sequence.\",\"symbols\":[\"DELETION\",\"INSERTION\",\"INVERSION\",\"MOBILE_INSERTION\",\"MOBILE_DELETION\",\"DUPLICATION\",\"TANDEM_DUPLICATION\"]}],\"doc\":\"The type of this structural variant.\",\"default\":null},{\"name\":\"assembly\",\"type\":[\"null\",\"string\"],\"doc\":\"The URL of the FASTA/NucleotideContig assembly for this structural variant,\\n   if one is available.\",\"default\":null},{\"name\":\"precise\",\"type\":[\"boolean\",\"null\"],\"doc\":\"Whether this structural variant call has precise breakpoints or not. Default\\n   value is true. If the call is imprecise, confidence intervals should be provided.\",\"default\":true},{\"name\":\"startWindow\",\"type\":[\"null\",\"int\"],\"doc\":\"The size of the confidence window around the start of the structural variant.\",\"default\":null},{\"name\":\"endWindow\",\"type\":[\"null\",\"int\"],\"doc\":\"The size of the confidence window around the end of the structural variant.\",\"default\":null}]}],\"doc\":\"The structural variant at this site, if the alternate allele is a structural\\n   variant. If the site is not a structural variant, this field should be left\\n   null.\",\"default\":null},{\"name\":\"isSomatic\",\"type\":[\"boolean\",\"null\"],\"doc\":\"A boolean describing whether this variant call is somatic; in this case, the\\n   `referenceAllele` will have been observed in another sample.\",\"default\":false}]}]},{\"name\":\"dbSnpId\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"geneSymbol\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"omimId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"cosmicId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"clinvarId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"clinicalSignificance\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"gerpNr\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"gerpRs\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"phylop\",\"type\":[\"null\",\"float\"],\"default\":null},{\"name\":\"ancestralAllele\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"thousandGenomesAlleleCount\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"thousandGenomesAlleleFrequency\",\"type\":[\"null\",\"float\"],\"default\":null},{\"name\":\"siftScore\",\"type\":[\"null\",\"float\"],\"default\":null},{\"name\":\"siftScoreConverted\",\"type\":[\"null\",\"float\"],\"default\":null},{\"name\":\"siftPred\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"mutationTasterScore\",\"type\":[\"null\",\"float\"],\"default\":null},{\"name\":\"mutationTasterScoreConverted\",\"type\":[\"null\",\"float\"],\"default\":null},{\"name\":\"mutationTasterPred\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public org.bdgenomics.formats.avro.Variant variant;
  @Deprecated public java.lang.Integer dbSnpId;
  @Deprecated public java.lang.CharSequence geneSymbol;
  @Deprecated public java.lang.CharSequence omimId;
  @Deprecated public java.lang.CharSequence cosmicId;
  @Deprecated public java.lang.CharSequence clinvarId;
  @Deprecated public java.lang.CharSequence clinicalSignificance;
  @Deprecated public java.lang.CharSequence gerpNr;
  @Deprecated public java.lang.CharSequence gerpRs;
  @Deprecated public java.lang.Float phylop;
  @Deprecated public java.lang.CharSequence ancestralAllele;
  @Deprecated public java.lang.Integer thousandGenomesAlleleCount;
  @Deprecated public java.lang.Float thousandGenomesAlleleFrequency;
  @Deprecated public java.lang.Float siftScore;
  @Deprecated public java.lang.Float siftScoreConverted;
  @Deprecated public java.lang.CharSequence siftPred;
  @Deprecated public java.lang.Float mutationTasterScore;
  @Deprecated public java.lang.Float mutationTasterScoreConverted;
  @Deprecated public java.lang.CharSequence mutationTasterPred;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public DatabaseVariantAnnotation() {}

  /**
   * All-args constructor.
   */
  public DatabaseVariantAnnotation(org.bdgenomics.formats.avro.Variant variant, java.lang.Integer dbSnpId, java.lang.CharSequence geneSymbol, java.lang.CharSequence omimId, java.lang.CharSequence cosmicId, java.lang.CharSequence clinvarId, java.lang.CharSequence clinicalSignificance, java.lang.CharSequence gerpNr, java.lang.CharSequence gerpRs, java.lang.Float phylop, java.lang.CharSequence ancestralAllele, java.lang.Integer thousandGenomesAlleleCount, java.lang.Float thousandGenomesAlleleFrequency, java.lang.Float siftScore, java.lang.Float siftScoreConverted, java.lang.CharSequence siftPred, java.lang.Float mutationTasterScore, java.lang.Float mutationTasterScoreConverted, java.lang.CharSequence mutationTasterPred) {
    this.variant = variant;
    this.dbSnpId = dbSnpId;
    this.geneSymbol = geneSymbol;
    this.omimId = omimId;
    this.cosmicId = cosmicId;
    this.clinvarId = clinvarId;
    this.clinicalSignificance = clinicalSignificance;
    this.gerpNr = gerpNr;
    this.gerpRs = gerpRs;
    this.phylop = phylop;
    this.ancestralAllele = ancestralAllele;
    this.thousandGenomesAlleleCount = thousandGenomesAlleleCount;
    this.thousandGenomesAlleleFrequency = thousandGenomesAlleleFrequency;
    this.siftScore = siftScore;
    this.siftScoreConverted = siftScoreConverted;
    this.siftPred = siftPred;
    this.mutationTasterScore = mutationTasterScore;
    this.mutationTasterScoreConverted = mutationTasterScoreConverted;
    this.mutationTasterPred = mutationTasterPred;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return variant;
    case 1: return dbSnpId;
    case 2: return geneSymbol;
    case 3: return omimId;
    case 4: return cosmicId;
    case 5: return clinvarId;
    case 6: return clinicalSignificance;
    case 7: return gerpNr;
    case 8: return gerpRs;
    case 9: return phylop;
    case 10: return ancestralAllele;
    case 11: return thousandGenomesAlleleCount;
    case 12: return thousandGenomesAlleleFrequency;
    case 13: return siftScore;
    case 14: return siftScoreConverted;
    case 15: return siftPred;
    case 16: return mutationTasterScore;
    case 17: return mutationTasterScoreConverted;
    case 18: return mutationTasterPred;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: variant = (org.bdgenomics.formats.avro.Variant)value$; break;
    case 1: dbSnpId = (java.lang.Integer)value$; break;
    case 2: geneSymbol = (java.lang.CharSequence)value$; break;
    case 3: omimId = (java.lang.CharSequence)value$; break;
    case 4: cosmicId = (java.lang.CharSequence)value$; break;
    case 5: clinvarId = (java.lang.CharSequence)value$; break;
    case 6: clinicalSignificance = (java.lang.CharSequence)value$; break;
    case 7: gerpNr = (java.lang.CharSequence)value$; break;
    case 8: gerpRs = (java.lang.CharSequence)value$; break;
    case 9: phylop = (java.lang.Float)value$; break;
    case 10: ancestralAllele = (java.lang.CharSequence)value$; break;
    case 11: thousandGenomesAlleleCount = (java.lang.Integer)value$; break;
    case 12: thousandGenomesAlleleFrequency = (java.lang.Float)value$; break;
    case 13: siftScore = (java.lang.Float)value$; break;
    case 14: siftScoreConverted = (java.lang.Float)value$; break;
    case 15: siftPred = (java.lang.CharSequence)value$; break;
    case 16: mutationTasterScore = (java.lang.Float)value$; break;
    case 17: mutationTasterScoreConverted = (java.lang.Float)value$; break;
    case 18: mutationTasterPred = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'variant' field.
   */
  public org.bdgenomics.formats.avro.Variant getVariant() {
    return variant;
  }

  /**
   * Sets the value of the 'variant' field.
   * @param value the value to set.
   */
  public void setVariant(org.bdgenomics.formats.avro.Variant value) {
    this.variant = value;
  }

  /**
   * Gets the value of the 'dbSnpId' field.
   */
  public java.lang.Integer getDbSnpId() {
    return dbSnpId;
  }

  /**
   * Sets the value of the 'dbSnpId' field.
   * @param value the value to set.
   */
  public void setDbSnpId(java.lang.Integer value) {
    this.dbSnpId = value;
  }

  /**
   * Gets the value of the 'geneSymbol' field.
   */
  public java.lang.CharSequence getGeneSymbol() {
    return geneSymbol;
  }

  /**
   * Sets the value of the 'geneSymbol' field.
   * @param value the value to set.
   */
  public void setGeneSymbol(java.lang.CharSequence value) {
    this.geneSymbol = value;
  }

  /**
   * Gets the value of the 'omimId' field.
   */
  public java.lang.CharSequence getOmimId() {
    return omimId;
  }

  /**
   * Sets the value of the 'omimId' field.
   * @param value the value to set.
   */
  public void setOmimId(java.lang.CharSequence value) {
    this.omimId = value;
  }

  /**
   * Gets the value of the 'cosmicId' field.
   */
  public java.lang.CharSequence getCosmicId() {
    return cosmicId;
  }

  /**
   * Sets the value of the 'cosmicId' field.
   * @param value the value to set.
   */
  public void setCosmicId(java.lang.CharSequence value) {
    this.cosmicId = value;
  }

  /**
   * Gets the value of the 'clinvarId' field.
   */
  public java.lang.CharSequence getClinvarId() {
    return clinvarId;
  }

  /**
   * Sets the value of the 'clinvarId' field.
   * @param value the value to set.
   */
  public void setClinvarId(java.lang.CharSequence value) {
    this.clinvarId = value;
  }

  /**
   * Gets the value of the 'clinicalSignificance' field.
   */
  public java.lang.CharSequence getClinicalSignificance() {
    return clinicalSignificance;
  }

  /**
   * Sets the value of the 'clinicalSignificance' field.
   * @param value the value to set.
   */
  public void setClinicalSignificance(java.lang.CharSequence value) {
    this.clinicalSignificance = value;
  }

  /**
   * Gets the value of the 'gerpNr' field.
   */
  public java.lang.CharSequence getGerpNr() {
    return gerpNr;
  }

  /**
   * Sets the value of the 'gerpNr' field.
   * @param value the value to set.
   */
  public void setGerpNr(java.lang.CharSequence value) {
    this.gerpNr = value;
  }

  /**
   * Gets the value of the 'gerpRs' field.
   */
  public java.lang.CharSequence getGerpRs() {
    return gerpRs;
  }

  /**
   * Sets the value of the 'gerpRs' field.
   * @param value the value to set.
   */
  public void setGerpRs(java.lang.CharSequence value) {
    this.gerpRs = value;
  }

  /**
   * Gets the value of the 'phylop' field.
   */
  public java.lang.Float getPhylop() {
    return phylop;
  }

  /**
   * Sets the value of the 'phylop' field.
   * @param value the value to set.
   */
  public void setPhylop(java.lang.Float value) {
    this.phylop = value;
  }

  /**
   * Gets the value of the 'ancestralAllele' field.
   */
  public java.lang.CharSequence getAncestralAllele() {
    return ancestralAllele;
  }

  /**
   * Sets the value of the 'ancestralAllele' field.
   * @param value the value to set.
   */
  public void setAncestralAllele(java.lang.CharSequence value) {
    this.ancestralAllele = value;
  }

  /**
   * Gets the value of the 'thousandGenomesAlleleCount' field.
   */
  public java.lang.Integer getThousandGenomesAlleleCount() {
    return thousandGenomesAlleleCount;
  }

  /**
   * Sets the value of the 'thousandGenomesAlleleCount' field.
   * @param value the value to set.
   */
  public void setThousandGenomesAlleleCount(java.lang.Integer value) {
    this.thousandGenomesAlleleCount = value;
  }

  /**
   * Gets the value of the 'thousandGenomesAlleleFrequency' field.
   */
  public java.lang.Float getThousandGenomesAlleleFrequency() {
    return thousandGenomesAlleleFrequency;
  }

  /**
   * Sets the value of the 'thousandGenomesAlleleFrequency' field.
   * @param value the value to set.
   */
  public void setThousandGenomesAlleleFrequency(java.lang.Float value) {
    this.thousandGenomesAlleleFrequency = value;
  }

  /**
   * Gets the value of the 'siftScore' field.
   */
  public java.lang.Float getSiftScore() {
    return siftScore;
  }

  /**
   * Sets the value of the 'siftScore' field.
   * @param value the value to set.
   */
  public void setSiftScore(java.lang.Float value) {
    this.siftScore = value;
  }

  /**
   * Gets the value of the 'siftScoreConverted' field.
   */
  public java.lang.Float getSiftScoreConverted() {
    return siftScoreConverted;
  }

  /**
   * Sets the value of the 'siftScoreConverted' field.
   * @param value the value to set.
   */
  public void setSiftScoreConverted(java.lang.Float value) {
    this.siftScoreConverted = value;
  }

  /**
   * Gets the value of the 'siftPred' field.
   */
  public java.lang.CharSequence getSiftPred() {
    return siftPred;
  }

  /**
   * Sets the value of the 'siftPred' field.
   * @param value the value to set.
   */
  public void setSiftPred(java.lang.CharSequence value) {
    this.siftPred = value;
  }

  /**
   * Gets the value of the 'mutationTasterScore' field.
   */
  public java.lang.Float getMutationTasterScore() {
    return mutationTasterScore;
  }

  /**
   * Sets the value of the 'mutationTasterScore' field.
   * @param value the value to set.
   */
  public void setMutationTasterScore(java.lang.Float value) {
    this.mutationTasterScore = value;
  }

  /**
   * Gets the value of the 'mutationTasterScoreConverted' field.
   */
  public java.lang.Float getMutationTasterScoreConverted() {
    return mutationTasterScoreConverted;
  }

  /**
   * Sets the value of the 'mutationTasterScoreConverted' field.
   * @param value the value to set.
   */
  public void setMutationTasterScoreConverted(java.lang.Float value) {
    this.mutationTasterScoreConverted = value;
  }

  /**
   * Gets the value of the 'mutationTasterPred' field.
   */
  public java.lang.CharSequence getMutationTasterPred() {
    return mutationTasterPred;
  }

  /**
   * Sets the value of the 'mutationTasterPred' field.
   * @param value the value to set.
   */
  public void setMutationTasterPred(java.lang.CharSequence value) {
    this.mutationTasterPred = value;
  }

  /** Creates a new DatabaseVariantAnnotation RecordBuilder */
  public static org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder newBuilder() {
    return new org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder();
  }
  
  /** Creates a new DatabaseVariantAnnotation RecordBuilder by copying an existing Builder */
  public static org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder newBuilder(org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder other) {
    return new org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder(other);
  }
  
  /** Creates a new DatabaseVariantAnnotation RecordBuilder by copying an existing DatabaseVariantAnnotation instance */
  public static org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder newBuilder(org.bdgenomics.formats.avro.DatabaseVariantAnnotation other) {
    return new org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder(other);
  }
  
  /**
   * RecordBuilder for DatabaseVariantAnnotation instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DatabaseVariantAnnotation>
    implements org.apache.avro.data.RecordBuilder<DatabaseVariantAnnotation> {

    private org.bdgenomics.formats.avro.Variant variant;
    private java.lang.Integer dbSnpId;
    private java.lang.CharSequence geneSymbol;
    private java.lang.CharSequence omimId;
    private java.lang.CharSequence cosmicId;
    private java.lang.CharSequence clinvarId;
    private java.lang.CharSequence clinicalSignificance;
    private java.lang.CharSequence gerpNr;
    private java.lang.CharSequence gerpRs;
    private java.lang.Float phylop;
    private java.lang.CharSequence ancestralAllele;
    private java.lang.Integer thousandGenomesAlleleCount;
    private java.lang.Float thousandGenomesAlleleFrequency;
    private java.lang.Float siftScore;
    private java.lang.Float siftScoreConverted;
    private java.lang.CharSequence siftPred;
    private java.lang.Float mutationTasterScore;
    private java.lang.Float mutationTasterScoreConverted;
    private java.lang.CharSequence mutationTasterPred;

    /** Creates a new Builder */
    private Builder() {
      super(org.bdgenomics.formats.avro.DatabaseVariantAnnotation.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.variant)) {
        this.variant = data().deepCopy(fields()[0].schema(), other.variant);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dbSnpId)) {
        this.dbSnpId = data().deepCopy(fields()[1].schema(), other.dbSnpId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.geneSymbol)) {
        this.geneSymbol = data().deepCopy(fields()[2].schema(), other.geneSymbol);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.omimId)) {
        this.omimId = data().deepCopy(fields()[3].schema(), other.omimId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.cosmicId)) {
        this.cosmicId = data().deepCopy(fields()[4].schema(), other.cosmicId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.clinvarId)) {
        this.clinvarId = data().deepCopy(fields()[5].schema(), other.clinvarId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.clinicalSignificance)) {
        this.clinicalSignificance = data().deepCopy(fields()[6].schema(), other.clinicalSignificance);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.gerpNr)) {
        this.gerpNr = data().deepCopy(fields()[7].schema(), other.gerpNr);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.gerpRs)) {
        this.gerpRs = data().deepCopy(fields()[8].schema(), other.gerpRs);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.phylop)) {
        this.phylop = data().deepCopy(fields()[9].schema(), other.phylop);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.ancestralAllele)) {
        this.ancestralAllele = data().deepCopy(fields()[10].schema(), other.ancestralAllele);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.thousandGenomesAlleleCount)) {
        this.thousandGenomesAlleleCount = data().deepCopy(fields()[11].schema(), other.thousandGenomesAlleleCount);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.thousandGenomesAlleleFrequency)) {
        this.thousandGenomesAlleleFrequency = data().deepCopy(fields()[12].schema(), other.thousandGenomesAlleleFrequency);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.siftScore)) {
        this.siftScore = data().deepCopy(fields()[13].schema(), other.siftScore);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.siftScoreConverted)) {
        this.siftScoreConverted = data().deepCopy(fields()[14].schema(), other.siftScoreConverted);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.siftPred)) {
        this.siftPred = data().deepCopy(fields()[15].schema(), other.siftPred);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.mutationTasterScore)) {
        this.mutationTasterScore = data().deepCopy(fields()[16].schema(), other.mutationTasterScore);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.mutationTasterScoreConverted)) {
        this.mutationTasterScoreConverted = data().deepCopy(fields()[17].schema(), other.mutationTasterScoreConverted);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.mutationTasterPred)) {
        this.mutationTasterPred = data().deepCopy(fields()[18].schema(), other.mutationTasterPred);
        fieldSetFlags()[18] = true;
      }
    }
    
    /** Creates a Builder by copying an existing DatabaseVariantAnnotation instance */
    private Builder(org.bdgenomics.formats.avro.DatabaseVariantAnnotation other) {
            super(org.bdgenomics.formats.avro.DatabaseVariantAnnotation.SCHEMA$);
      if (isValidValue(fields()[0], other.variant)) {
        this.variant = data().deepCopy(fields()[0].schema(), other.variant);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dbSnpId)) {
        this.dbSnpId = data().deepCopy(fields()[1].schema(), other.dbSnpId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.geneSymbol)) {
        this.geneSymbol = data().deepCopy(fields()[2].schema(), other.geneSymbol);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.omimId)) {
        this.omimId = data().deepCopy(fields()[3].schema(), other.omimId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.cosmicId)) {
        this.cosmicId = data().deepCopy(fields()[4].schema(), other.cosmicId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.clinvarId)) {
        this.clinvarId = data().deepCopy(fields()[5].schema(), other.clinvarId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.clinicalSignificance)) {
        this.clinicalSignificance = data().deepCopy(fields()[6].schema(), other.clinicalSignificance);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.gerpNr)) {
        this.gerpNr = data().deepCopy(fields()[7].schema(), other.gerpNr);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.gerpRs)) {
        this.gerpRs = data().deepCopy(fields()[8].schema(), other.gerpRs);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.phylop)) {
        this.phylop = data().deepCopy(fields()[9].schema(), other.phylop);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.ancestralAllele)) {
        this.ancestralAllele = data().deepCopy(fields()[10].schema(), other.ancestralAllele);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.thousandGenomesAlleleCount)) {
        this.thousandGenomesAlleleCount = data().deepCopy(fields()[11].schema(), other.thousandGenomesAlleleCount);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.thousandGenomesAlleleFrequency)) {
        this.thousandGenomesAlleleFrequency = data().deepCopy(fields()[12].schema(), other.thousandGenomesAlleleFrequency);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.siftScore)) {
        this.siftScore = data().deepCopy(fields()[13].schema(), other.siftScore);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.siftScoreConverted)) {
        this.siftScoreConverted = data().deepCopy(fields()[14].schema(), other.siftScoreConverted);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.siftPred)) {
        this.siftPred = data().deepCopy(fields()[15].schema(), other.siftPred);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.mutationTasterScore)) {
        this.mutationTasterScore = data().deepCopy(fields()[16].schema(), other.mutationTasterScore);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.mutationTasterScoreConverted)) {
        this.mutationTasterScoreConverted = data().deepCopy(fields()[17].schema(), other.mutationTasterScoreConverted);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.mutationTasterPred)) {
        this.mutationTasterPred = data().deepCopy(fields()[18].schema(), other.mutationTasterPred);
        fieldSetFlags()[18] = true;
      }
    }

    /** Gets the value of the 'variant' field */
    public org.bdgenomics.formats.avro.Variant getVariant() {
      return variant;
    }
    
    /** Sets the value of the 'variant' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder setVariant(org.bdgenomics.formats.avro.Variant value) {
      validate(fields()[0], value);
      this.variant = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'variant' field has been set */
    public boolean hasVariant() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'variant' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder clearVariant() {
      variant = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'dbSnpId' field */
    public java.lang.Integer getDbSnpId() {
      return dbSnpId;
    }
    
    /** Sets the value of the 'dbSnpId' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder setDbSnpId(java.lang.Integer value) {
      validate(fields()[1], value);
      this.dbSnpId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'dbSnpId' field has been set */
    public boolean hasDbSnpId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'dbSnpId' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder clearDbSnpId() {
      dbSnpId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'geneSymbol' field */
    public java.lang.CharSequence getGeneSymbol() {
      return geneSymbol;
    }
    
    /** Sets the value of the 'geneSymbol' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder setGeneSymbol(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.geneSymbol = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'geneSymbol' field has been set */
    public boolean hasGeneSymbol() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'geneSymbol' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder clearGeneSymbol() {
      geneSymbol = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'omimId' field */
    public java.lang.CharSequence getOmimId() {
      return omimId;
    }
    
    /** Sets the value of the 'omimId' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder setOmimId(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.omimId = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'omimId' field has been set */
    public boolean hasOmimId() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'omimId' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder clearOmimId() {
      omimId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'cosmicId' field */
    public java.lang.CharSequence getCosmicId() {
      return cosmicId;
    }
    
    /** Sets the value of the 'cosmicId' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder setCosmicId(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.cosmicId = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'cosmicId' field has been set */
    public boolean hasCosmicId() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'cosmicId' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder clearCosmicId() {
      cosmicId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'clinvarId' field */
    public java.lang.CharSequence getClinvarId() {
      return clinvarId;
    }
    
    /** Sets the value of the 'clinvarId' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder setClinvarId(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.clinvarId = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'clinvarId' field has been set */
    public boolean hasClinvarId() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'clinvarId' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder clearClinvarId() {
      clinvarId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'clinicalSignificance' field */
    public java.lang.CharSequence getClinicalSignificance() {
      return clinicalSignificance;
    }
    
    /** Sets the value of the 'clinicalSignificance' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder setClinicalSignificance(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.clinicalSignificance = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'clinicalSignificance' field has been set */
    public boolean hasClinicalSignificance() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'clinicalSignificance' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder clearClinicalSignificance() {
      clinicalSignificance = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'gerpNr' field */
    public java.lang.CharSequence getGerpNr() {
      return gerpNr;
    }
    
    /** Sets the value of the 'gerpNr' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder setGerpNr(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.gerpNr = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'gerpNr' field has been set */
    public boolean hasGerpNr() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'gerpNr' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder clearGerpNr() {
      gerpNr = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'gerpRs' field */
    public java.lang.CharSequence getGerpRs() {
      return gerpRs;
    }
    
    /** Sets the value of the 'gerpRs' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder setGerpRs(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.gerpRs = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'gerpRs' field has been set */
    public boolean hasGerpRs() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'gerpRs' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder clearGerpRs() {
      gerpRs = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'phylop' field */
    public java.lang.Float getPhylop() {
      return phylop;
    }
    
    /** Sets the value of the 'phylop' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder setPhylop(java.lang.Float value) {
      validate(fields()[9], value);
      this.phylop = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'phylop' field has been set */
    public boolean hasPhylop() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'phylop' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder clearPhylop() {
      phylop = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'ancestralAllele' field */
    public java.lang.CharSequence getAncestralAllele() {
      return ancestralAllele;
    }
    
    /** Sets the value of the 'ancestralAllele' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder setAncestralAllele(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.ancestralAllele = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'ancestralAllele' field has been set */
    public boolean hasAncestralAllele() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'ancestralAllele' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder clearAncestralAllele() {
      ancestralAllele = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'thousandGenomesAlleleCount' field */
    public java.lang.Integer getThousandGenomesAlleleCount() {
      return thousandGenomesAlleleCount;
    }
    
    /** Sets the value of the 'thousandGenomesAlleleCount' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder setThousandGenomesAlleleCount(java.lang.Integer value) {
      validate(fields()[11], value);
      this.thousandGenomesAlleleCount = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'thousandGenomesAlleleCount' field has been set */
    public boolean hasThousandGenomesAlleleCount() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'thousandGenomesAlleleCount' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder clearThousandGenomesAlleleCount() {
      thousandGenomesAlleleCount = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /** Gets the value of the 'thousandGenomesAlleleFrequency' field */
    public java.lang.Float getThousandGenomesAlleleFrequency() {
      return thousandGenomesAlleleFrequency;
    }
    
    /** Sets the value of the 'thousandGenomesAlleleFrequency' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder setThousandGenomesAlleleFrequency(java.lang.Float value) {
      validate(fields()[12], value);
      this.thousandGenomesAlleleFrequency = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'thousandGenomesAlleleFrequency' field has been set */
    public boolean hasThousandGenomesAlleleFrequency() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'thousandGenomesAlleleFrequency' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder clearThousandGenomesAlleleFrequency() {
      thousandGenomesAlleleFrequency = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /** Gets the value of the 'siftScore' field */
    public java.lang.Float getSiftScore() {
      return siftScore;
    }
    
    /** Sets the value of the 'siftScore' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder setSiftScore(java.lang.Float value) {
      validate(fields()[13], value);
      this.siftScore = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'siftScore' field has been set */
    public boolean hasSiftScore() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'siftScore' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder clearSiftScore() {
      siftScore = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /** Gets the value of the 'siftScoreConverted' field */
    public java.lang.Float getSiftScoreConverted() {
      return siftScoreConverted;
    }
    
    /** Sets the value of the 'siftScoreConverted' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder setSiftScoreConverted(java.lang.Float value) {
      validate(fields()[14], value);
      this.siftScoreConverted = value;
      fieldSetFlags()[14] = true;
      return this; 
    }
    
    /** Checks whether the 'siftScoreConverted' field has been set */
    public boolean hasSiftScoreConverted() {
      return fieldSetFlags()[14];
    }
    
    /** Clears the value of the 'siftScoreConverted' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder clearSiftScoreConverted() {
      siftScoreConverted = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /** Gets the value of the 'siftPred' field */
    public java.lang.CharSequence getSiftPred() {
      return siftPred;
    }
    
    /** Sets the value of the 'siftPred' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder setSiftPred(java.lang.CharSequence value) {
      validate(fields()[15], value);
      this.siftPred = value;
      fieldSetFlags()[15] = true;
      return this; 
    }
    
    /** Checks whether the 'siftPred' field has been set */
    public boolean hasSiftPred() {
      return fieldSetFlags()[15];
    }
    
    /** Clears the value of the 'siftPred' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder clearSiftPred() {
      siftPred = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /** Gets the value of the 'mutationTasterScore' field */
    public java.lang.Float getMutationTasterScore() {
      return mutationTasterScore;
    }
    
    /** Sets the value of the 'mutationTasterScore' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder setMutationTasterScore(java.lang.Float value) {
      validate(fields()[16], value);
      this.mutationTasterScore = value;
      fieldSetFlags()[16] = true;
      return this; 
    }
    
    /** Checks whether the 'mutationTasterScore' field has been set */
    public boolean hasMutationTasterScore() {
      return fieldSetFlags()[16];
    }
    
    /** Clears the value of the 'mutationTasterScore' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder clearMutationTasterScore() {
      mutationTasterScore = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /** Gets the value of the 'mutationTasterScoreConverted' field */
    public java.lang.Float getMutationTasterScoreConverted() {
      return mutationTasterScoreConverted;
    }
    
    /** Sets the value of the 'mutationTasterScoreConverted' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder setMutationTasterScoreConverted(java.lang.Float value) {
      validate(fields()[17], value);
      this.mutationTasterScoreConverted = value;
      fieldSetFlags()[17] = true;
      return this; 
    }
    
    /** Checks whether the 'mutationTasterScoreConverted' field has been set */
    public boolean hasMutationTasterScoreConverted() {
      return fieldSetFlags()[17];
    }
    
    /** Clears the value of the 'mutationTasterScoreConverted' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder clearMutationTasterScoreConverted() {
      mutationTasterScoreConverted = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /** Gets the value of the 'mutationTasterPred' field */
    public java.lang.CharSequence getMutationTasterPred() {
      return mutationTasterPred;
    }
    
    /** Sets the value of the 'mutationTasterPred' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder setMutationTasterPred(java.lang.CharSequence value) {
      validate(fields()[18], value);
      this.mutationTasterPred = value;
      fieldSetFlags()[18] = true;
      return this; 
    }
    
    /** Checks whether the 'mutationTasterPred' field has been set */
    public boolean hasMutationTasterPred() {
      return fieldSetFlags()[18];
    }
    
    /** Clears the value of the 'mutationTasterPred' field */
    public org.bdgenomics.formats.avro.DatabaseVariantAnnotation.Builder clearMutationTasterPred() {
      mutationTasterPred = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    @Override
    public DatabaseVariantAnnotation build() {
      try {
        DatabaseVariantAnnotation record = new DatabaseVariantAnnotation();
        record.variant = fieldSetFlags()[0] ? this.variant : (org.bdgenomics.formats.avro.Variant) defaultValue(fields()[0]);
        record.dbSnpId = fieldSetFlags()[1] ? this.dbSnpId : (java.lang.Integer) defaultValue(fields()[1]);
        record.geneSymbol = fieldSetFlags()[2] ? this.geneSymbol : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.omimId = fieldSetFlags()[3] ? this.omimId : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.cosmicId = fieldSetFlags()[4] ? this.cosmicId : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.clinvarId = fieldSetFlags()[5] ? this.clinvarId : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.clinicalSignificance = fieldSetFlags()[6] ? this.clinicalSignificance : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.gerpNr = fieldSetFlags()[7] ? this.gerpNr : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.gerpRs = fieldSetFlags()[8] ? this.gerpRs : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.phylop = fieldSetFlags()[9] ? this.phylop : (java.lang.Float) defaultValue(fields()[9]);
        record.ancestralAllele = fieldSetFlags()[10] ? this.ancestralAllele : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.thousandGenomesAlleleCount = fieldSetFlags()[11] ? this.thousandGenomesAlleleCount : (java.lang.Integer) defaultValue(fields()[11]);
        record.thousandGenomesAlleleFrequency = fieldSetFlags()[12] ? this.thousandGenomesAlleleFrequency : (java.lang.Float) defaultValue(fields()[12]);
        record.siftScore = fieldSetFlags()[13] ? this.siftScore : (java.lang.Float) defaultValue(fields()[13]);
        record.siftScoreConverted = fieldSetFlags()[14] ? this.siftScoreConverted : (java.lang.Float) defaultValue(fields()[14]);
        record.siftPred = fieldSetFlags()[15] ? this.siftPred : (java.lang.CharSequence) defaultValue(fields()[15]);
        record.mutationTasterScore = fieldSetFlags()[16] ? this.mutationTasterScore : (java.lang.Float) defaultValue(fields()[16]);
        record.mutationTasterScoreConverted = fieldSetFlags()[17] ? this.mutationTasterScoreConverted : (java.lang.Float) defaultValue(fields()[17]);
        record.mutationTasterPred = fieldSetFlags()[18] ? this.mutationTasterPred : (java.lang.CharSequence) defaultValue(fields()[18]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
